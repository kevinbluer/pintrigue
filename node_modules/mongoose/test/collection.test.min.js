var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),Collection=require("../lib/collection");describe("collections:",function(){it("should buffer commands until connection is established",function(e){function o(){if(--s)return;assert.ok(r);assert.ok(i);e()}var t=mongoose.createConnection(),n=t.collection("test-buffering-collection"),r=!1,i=!1,s=2;n.insert({},{safe:!0},function(){assert.ok(r);i=!0;t.close();o()});var u="mongodb://localhost/mongoose_test";t.open(process.env.MONGOOSE_TEST_URI||u,function(e){r=!e;o()})});it("methods should that throw (unimplemented)",function(){var e=new Collection("test",mongoose.connection),t=!1;try{e.getIndexes()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.update()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.save()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.insert()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.find()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.findOne()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.findAndModify()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1;try{e.ensureIndex()}catch(n){assert.ok(/unimplemented/.test(n.message));t=!0}assert.ok(t);t=!1})});