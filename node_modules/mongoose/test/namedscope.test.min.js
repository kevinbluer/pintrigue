//Query.prototype.where(criteria, callback)
//Query.prototype.where(path, val, callback)
//
//UserNS.namedScope({
//    twenties: Query.where('age').gte(20).lt(30)
//  , male: Query.where('gender', 'male')
//  , lastLogin: Query.where('lastLogin').get(+new Date - (24 * 3600 * 1000))
//});
//
//UserNS.find(twenties, male, active, function (err, found) {
//});
//
//// twenties.male OR twenties.active
//UserNS.twenties.male.OR.twenties.active.find(callback);
//UserNS.find(twenties.male, twenties.active, function (err, found) {
//});
//
//UserNS.find(olderThan(20).male, olderThan(30).active, function (err, found) {
//});
//UserNS.twenties.male.active.remove(callback);
/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Schema=mongoose.Schema,_24hours=864e5,UserNSSchema=new Schema({age:Number,gender:String,lastLogin:Date});UserNSSchema.namedScope("olderThan",function(e){return this.where("age").gt(e)});UserNSSchema.namedScope("youngerThan",function(e){return this.where("age").lt(e)});UserNSSchema.namedScope("twenties").olderThan(19).youngerThan(30);UserNSSchema.namedScope("male").where("gender","male");UserNSSchema.namedScope("female").where("gender","female");UserNSSchema.namedScope("active",function(){return this.where("lastLogin").gte(+(new Date)-_24hours)});mongoose.model("UserNS",UserNSSchema);describe("named scope",function(){it("basic named scopes should work, for find",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({gender:"male"},{gender:"male"},{gender:"female"},function(r,i){assert.ifError(r);n.male.find(function(n,r){t.close();assert.ifError(n);assert.equal(2,r.length);e()})})});it("dynamic named scopes should work, for find",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({age:21},{age:22},{age:19},function(r,i){assert.ifError(r);n.olderThan(20).find(function(n,r){t.close();assert.ifError(n);assert.equal(2,r.length);e()})})});it("named scopes built on top of dynamic named scopes should work, for find",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({age:21},{age:22},{age:19},function(r,i){assert.ifError(r);n.twenties.find(function(n,r){t.close();assert.ifError(n);assert.equal(2,r.length);e()})})});it("chaining named scopes should work, for find",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({age:21,gender:"male",lastLogin:+(new Date)-_24hours-3600},{age:45,gender:"male",lastLogin:+(new Date)},{age:50,gender:"female",lastLogin:+(new Date)},function(r,i,s,i){assert.ifError(r);n.olderThan(40).active.male.find(function(n,r){t.close();assert.ifError(n);assert.equal(1,r.length);assert.deepEqual(r[0]._id,s._id);e()})})});it("basic named scopes should work, for remove",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({gender:"male"},{gender:"male"},{gender:"female"},function(r,i){assert.ifError(r);n.male.remove(function(r){assert.ifError(r);n.male.find(function(n,r){t.close();assert.ifError(n);assert.equal(0,r.length);e()})})})});it("basic named scopes should work, for update",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({gender:"male"},{gender:"male"},{gender:"female"},function(r,i,s,o){assert.ifError(r);n.male.update({gender:"female"},function(r){assert.ifError(r);n.female.find(function(r,i){assert.ifError(r);assert.equal(2,i.length);n.male.find(function(n,r){t.close();assert.ifError(n);assert.equal(1,r.length);e()})})})})});it("chained named scopes should work, for findOne",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({age:100,gender:"male"},function(r,i){assert.ifError(r);n.male.olderThan(99).findOne(function(n,r){t.close();assert.ifError(n);assert.deepEqual(r._id,i._id);e()})})});it("hybrid use of chained named scopes and ad hoc querying should work",function(e){var t=start(),n=t.model("UserNS","users_"+random());n.create({age:100,gender:"female"},function(r,i){assert.ifError(r);n.female.where("age").gt(99).findOne(function(n,r){t.close();assert.ifError(n);assert.deepEqual(r._id,i._id);e()})})})});