/**
 * Module dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,Schema=mongoose.Schema;describe("connections:",function(){it("should allow closing a closed connection",function(e){var t=mongoose.createConnection(),n=!1;assert.equal(0,t.readyState);t.close(e)});it("should accept valid arguments",function(){var e=mongoose.createConnection("mongodb://localhost/fake");e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal(undefined,e.pass);assert.equal(undefined,e.user);assert.equal("fake",e.name);assert.equal("localhost",e.host);assert.equal(27017,e.port);e.close();e=mongoose.createConnection("mongodb://localhost:27000/fake");e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(27e3,e.port);e.close();e=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake");e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("psw",e.pass);assert.equal("aaron",e.user);assert.equal("fake",e.name);assert.equal("localhost",e.host);assert.equal(27e3,e.port);e.close();e=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{db:{forceServerObjectId:!0}});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);e.close();e=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{server:{auto_reconnect:!1}});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!1,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);e.close();e=mongoose.createConnection("127.0.0.1","faker",28e3,{server:{auto_reconnect:!0}});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("faker",e.name);assert.equal("127.0.0.1",e.host);assert.equal(28e3,e.port);e.close();e=mongoose.createConnection("127.0.0.1","faker",28001);e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("faker",e.name);assert.equal("127.0.0.1",e.host);assert.equal(28001,e.port);e.close();e=mongoose.createConnection("127.0.0.1","faker",{blah:1});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("faker",e.name);assert.equal("127.0.0.1",e.host);assert.equal(27017,e.port);assert.equal(1,e.options.blah);e.close();e=mongoose.createConnection("127.0.0.1","faker");e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("faker",e.name);assert.equal("127.0.0.1",e.host);assert.equal(27017,e.port);e.close();e=mongoose.createConnection("aaron:psw@localhost","fake",27e3);e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("fake",e.name);assert.equal("localhost",e.host);assert.equal(27e3,e.port);assert.equal("psw",e.pass);assert.equal("aaron",e.user);e.close();e=mongoose.createConnection("localhost","fake",27e3,{user:"aaron",pass:"psw"});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("fake",e.name);assert.equal("localhost",e.host);assert.equal(27e3,e.port);assert.equal("psw",e.pass);assert.equal("aaron",e.user);e.close();e=mongoose.createConnection("localhost","fake",27e3,{user:"no_pass"});e.on("error",function(e){});assert.equal("object",typeof e.options);assert.equal("object",typeof e.options.server);assert.equal(!0,e.options.server.auto_reconnect);assert.equal("object",typeof e.options.db);assert.equal(!1,e.options.db.forceServerObjectId);assert.equal("fake",e.name);assert.equal("localhost",e.host);assert.equal(27e3,e.port);assert.equal(undefined,e.pass);assert.equal(undefined,e.user);e.close()});describe("missing protocols",function(){it("are allowed with replsets",function(){var e=mongoose.createConnection("localhost:12345,127.0.0.1:14326",function(e){assert.ok(e)});assert.deepEqual(["localhost","127.0.0.1"],e.host);assert.deepEqual([12345,14326],e.port)});it("are allowed with single connections",function(){var e=mongoose.createConnection();e.doOpen=function(){};e.open("localhost:12345/woot");assert.deepEqual("localhost",e.host);assert.deepEqual(12345,e.port)})});describe("connect callbacks",function(){it("execute with user:pwd connection strings",function(e){var t=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{server:{auto_reconnect:!0}},function(){e()});t.on("error",function(e){assert.ok(e)});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);t.close()});it("execute without user:pwd connection strings",function(e){var t=mongoose.createConnection("mongodb://localhost/fake",e);t.on("error",function(e){assert.ok(e)});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal(undefined,t.user);assert.equal("fake",t.name);assert.equal("localhost",t.host);assert.equal(27017,t.port);t.close()});it("should return an error if malformed uri passed",function(e){var t=mongoose.createConnection("mongodb:///fake",function(t){assert.equal("Missing connection hostname.",t.message);e()});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal(undefined,t.name);assert.equal(undefined,t.host);assert.equal(undefined,t.port);t.close()});it("should return an error if db was not specified",function(e){var t=mongoose.createConnection("mongodb://localhost",function(t){assert.equal("Missing connection database.",t.message);e()});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal(undefined,t.name);assert.equal(undefined,t.host);assert.equal(undefined,t.port);t.close()});it("should fire when individual args are passed",function(e){var t=mongoose.createConnection("127.0.0.1","faker",28e3,{server:{auto_reconnect:!1}},function(){e()});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!1,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal("faker",t.name);assert.equal("127.0.0.1",t.host);assert.equal(28e3,t.port);t.close()});it("should fire when no options are passed",function(e){var t=mongoose.createConnection("127.0.0.1","faker",28e3,function(){e()});assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal("faker",t.name);assert.equal("127.0.0.1",t.host);assert.equal(28e3,t.port);t.close()});it("should fire when default port utilized",function(e){var t=mongoose.createConnection("127.0.0.1","faker",e);assert.equal("object",typeof t.options);assert.equal("object",typeof t.options.server);assert.equal(!0,t.options.server.auto_reconnect);assert.equal("object",typeof t.options.db);assert.equal(!1,t.options.db.forceServerObjectId);assert.equal("faker",t.name);assert.equal("127.0.0.1",t.host);assert.equal(27017,t.port);t.close()})});describe("errors",function(){it("should be thrown when there are no listeners",function(e){var t=process._events.uncaughtException;process._events.uncaughtException=function(n){assert.ok(n);process._events.uncaughtException=t;e()};var n=start({uri:"mongodb://whatever23939.localhost/noooope",noErrorListener:1})});it("should occur without hanging when password with special chars is used (gh-460)",function(e){var t=mongoose.createConnection("mongodb://aaron:psw?@localhost/fake",function(n){assert.ok(n);t.close();e()})})});describe(".model()",function(){it("allows passing a schema",function(){var e=start(),t=e.model("MyModelasdf",new Schema({name:String}));e.close();assert.ok(t.schema instanceof Schema);assert.ok(t.prototype.schema instanceof Schema);var n=new t({name:"aaron"});assert.equal("aaron",n.name)});it("should properly assign the db",function(){var e=mongoose.model("testing853a",new Schema({x:String}),"testing853-1"),t=mongoose.model("testing853b",new Schema({x:String}),"testing853-2"),n=t.model("testing853a");assert.ok(n==e)})});it("error event fires with one listener",function(e){var t=start({uri:"mongodb://localasdfads/fakeeee",noErrorListener:1});t.on("error",function(){e()})})});