/**
 * Test dependencies.
 */var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error,Comments=new Schema;Comments.add({title:String,date:Date,comments:[Comments]});var BlogPost=new Schema({title:String,date:Date,meta:{date:Date,visitors:Number,nested:[Comments],numbers:[Number]},mixed:{},numbers:[Number],comments:[Comments],arr:[]},{collection:"versioning_"+random()});mongoose.model("Versioning",BlogPost);describe("versioning",function(){it("works",function(e){function i(e,t){e.meta.numbers.push(9);t.meta.numbers.push(8);m(e,t,s)}function s(e,t,n){assert.ifError(e);assert.equal(t.meta.numbers.length,5);assert.equal(t._doc.__v,2);t.meta.numbers.pull(10);n.meta.numbers.push(20);m(t,n,o)}function o(e,t,n){assert.ifError(e);assert.equal(t.meta.numbers.length,5);assert.equal(n.meta.numbers.length,5);assert.equal(-1,t.meta.numbers.indexOf(10));assert.ok(~t.meta.numbers.indexOf(20));assert.equal(t._doc.__v,4);t.numbers.pull(3,20);n.set("numbers.2",100);m(t,n,u)}function u(e,t,n){assert.ok(/No matching document/.test(e),e);assert.equal(t._doc.__v,5);t.set("arr.0.0","updated");var r=t._delta();assert.equal(t._doc.__v,r[0].__v,"version should be added to where clause");assert.ok(!("$inc"in r[1]));m(t,n,a)}function a(e,t,n){assert.ifError(e);assert.equal("updated",t.arr[0][0]);assert.equal(t._doc.__v,5);t.set("arr.0","not an array");n.arr.pull(10);n.arr.addToSet("using set");m(t,n,f)}function f(e,t,n){assert.ifError(e);assert.equal(t.arr.length,2);assert.equal("updated",t.arr[0][0]);assert.equal("using set",t.arr[1]);assert.equal(t._doc.__v,6);n.set("arr.0","not an array");t.arr.pull("using set");t.arr.push("woot","woot2");t.arr.$pop();m(t,n,l)}function l(e,t,n){assert.ok(/No matching document/.test(e),"changes to b should not be applied");assert.equal(t.arr.length,2);assert.equal("updated",t.arr[0][0]);assert.equal("woot",t.arr[1]);assert.equal(t._doc.__v,7);t.meta.nested.$pop();n.meta.nested.$pop();m(t,n,c)}function c(e,t,n){assert.ok(/No matching document/.test(e),"changes to b should not be applied");assert.equal(t.meta.nested.length,3);assert.equal(t._doc.__v,8);t.meta.nested.push({title:"the"});t.meta.nested.push({title:"killing"});n.meta.nested.push({title:"biutiful"});m(t,n,h)}function h(e,t,n){assert.ifError(e);assert.equal(6,t.meta.nested.length);assert.equal(t._doc.__v,10);t.meta.nested[2].title="two";n.meta.nested[0].title="zero";n.meta.nested[1].comments[0].title="sub one";m(t,n,function(e,r,i){assert.ifError(e);assert.equal(t._doc.__v,10);assert.equal(n._doc.__v,10);p(null,r,i)})}function p(e,t,n){assert.ifError(e);assert.equal("two",n.meta.nested[2].title);assert.equal("zero",n.meta.nested[0].title);assert.equal("sub one",n.meta.nested[1].comments[0].title);assert.equal(t._doc.__v,10);assert.equal(3,t.mixed.arr.length);t.mixed.arr.push([10],{x:1},"woot");t.markModified("mixed.arr");m(t,n,d)}function d(e,t,n){assert.ifError(e);assert.equal(t._doc.__v,11);assert.equal(6,t.mixed.arr.length);assert.equal(1,t.mixed.arr[4].x);assert.equal("woot",t.mixed.arr[5]);assert.equal(10,t.mixed.arr[3][0]);t.comments.addToSet({title:"monkey"});n.markModified("comments");var r=n._delta();assert.ok(r[1].$inc,"a $set of an array should trigger versioning");m(t,n,v)}function v(n,r,i){assert.ok(/No matching document/.test(n),"changes to b should not be applied");assert.equal(5,r.comments.length);r.comments.addToSet({title:"aven"});r.comments.addToSet({title:"avengers"});var s=r._delta();assert.equal(undefined,s[0].__v,"version should not be included in where clause");assert.ok(!s[1].$set);assert.ok(s[1].$addToSet);assert.ok(s[1].$addToSet.comments);r.comments.$shift();var s=r._delta();assert.equal(12,s[0].__v,"version should be included in where clause");assert.ok(s[1].$set,"two differing atomic ops on same path should create a $set");assert.ok(s[1].$inc,"a $set of an array should trigger versioning");assert.ok(!s[1].$addToSet);t.close();e()}function m(e,t,r){function o(){var i,o;n.findById(e,function(e,t){e&&(s=e);i=t;i&&o&&r(s,i,o)});n.findById(t,function(e,t){e&&(s=e);o=t;i&&o&&r(s,i,o)})}var i=2,s;e.save(function(e){e&&(s=e);if(--i)return;o()});t.save(function(e){e&&(s=e);if(--i)return;o()})}var t=start(),n=t.model("Versioning"),r=new n;r.title="testing versioning";r.date=new Date;r.meta.date=new Date;r.meta.visitors=34;r.meta.numbers=[12,11,10];r.meta.nested=[{title:"does it work?",date:new Date},{title:"1",comments:[{title:"this is sub #1"},{title:"this is sub #2"}]},{title:"2",comments:[{title:"this is sub #3"},{title:"this is sub #4"}]},{title:"hi",date:new Date}];r.mixed={arr:[12,11,10]};r.numbers=[3,4,5,6,7];r.comments=[{title:"comments 0",date:new Date},{title:"comments 1",comments:[{title:"comments.1.comments.1"},{title:"comments.1.comments.2"}]},{title:"coments 2",comments:[{title:"comments.2.comments.1"},{title:"comments.2.comments.2"}]},{title:"comments 3",date:new Date}];r.arr=[["2d"]];r.save(function(e){var t,s;assert.ifError(e);n.findById(r,function(e,n){assert.ifError(e);t=n;t&&s&&i(t,s)});n.findById(r,function(e,n){assert.ifError(e);s=n;t&&s&&i(t,s)})})});it("versioning without version key",function(e){function i(i){assert.ifError(i);n.findById(r).select("numbers comments").exec(function(n,r){t.close();assert.ifError(n);r.comments[0].title="no version was included";var i=r._delta();assert.ok(!i[0].__v,"no version key was selected so should not be included");e()})}var t=start(),n=t.model("Versioning"),r=new n;r.numbers=[3,4,5,6,7];r.comments=[{title:"does it work?",date:new Date},{title:"1",comments:[{title:"this is sub #1"},{title:"this is sub #2"}]},{title:"2",comments:[{title:"this is sub #3"},{title:"this is sub #4"}]},{title:"hi",date:new Date}];r.save(i)});it("version works with strict docs",function(e){var t=start(),n=new Schema({str:["string"]},{strict:!0,collection:"versionstrict_"+random()}),r=t.model("VersionStrict",n),i=new r({str:["death","to","smootchy"]});i.save(function(n){assert.ifError(n);r.find(i,function(n,i){assert.ifError(n);assert.equal(1,i.length);i=i[0];assert.equal(0,i._doc.__v);i.str.pull("death");i.save(function(n){assert.ifError(n);r.findById(i,function(n,r){t.close();assert.ifError(n);assert.equal(1,r._doc.__v);assert.equal(2,r.str.length);assert.ok(!~r.str.indexOf("death"));e()})})})})});it("version works with existing unversioned docs",function(e){var t=start(),n=t.model("Versioning");n.collection.insert({title:"unversioned",numbers:[1,2,3]},{safe:!0},function(r){assert.ifError(r);n.findOne({title:"unversioned"},function(r,i){assert.ifError(r);assert.ok(!i._doc.__v);i.numbers.splice(1,1,10);var s=i._delta();assert.equal(undefined,s[0].__v);assert.ok(s[1].$inc);assert.equal(1,s[1].$inc.__v);i.save(function(r,i){assert.ifError(r);assert.equal(1,i._doc.__v);n.findById(i,function(n,r){t.close();assert.ifError(n);assert.ok(r);e()})})})})});it("versionKey is configurable",function(e){var t=start(),n=new Schema({configured:"bool"},{versionKey:"lolwat",collection:"configuredversion"+random()}),r=t.model("ConfiguredVersionKey",n),i=new r({configured:!0});i.save(function(n){assert.ifError(n);r.findById(i,function(n,r){t.close();assert.ifError(n);assert.equal(0,r._doc.lolwat);e()})})});it("can be disabled",function(e){var t=start(),n=Schema({x:["string"]},{versionKey:!1}),r=t.model("disabledVersioning",n,"s"+random());r.create({x:["hi"]},function(t,n){assert.ifError(t);assert.equal(!1,"__v"in n._doc);n.x.pull("hi");n.save(function(t){assert.ifError(t);assert.equal(!1,"__v"in n._doc);n.set("x.0","updated");var i=n._delta()[0];assert.equal(undefined,i.__v,"version should not be added to where clause");r.collection.findOne({_id:n._id},function(t,n){assert.equal(!1,"__v"in n);e()})})})})});