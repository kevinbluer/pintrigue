var url=require("url"),start=require("./common"),assert=require("assert"),mongoose=start.mongoose,Mongoose=mongoose.Mongoose,Schema=mongoose.Schema,random=require("../lib/utils").random,collection="blogposts_"+random();describe("mongoose module:",function(){it("default connection works",function(e){var t=mongoose.connection,n="mongodb://localhost/mongoose_test";mongoose.connect(process.env.MONGOOSE_TEST_URI||n);t.on("open",function(){t.close(function(){e()})})});it("{g,s}etting options",function(){var e=new Mongoose;e.set("a","b");e.set("long option","c");assert.equal("b",e.get("a"));assert.equal("b",e.set("a"));assert.equal("c",e.get("long option"))});it("declaring global plugins",function(){var e=new Mongoose,t=new Schema,n=0;e.plugin(function(e){assert.equal(e,t);n++});t.plugin(function(e){assert.equal(e,t);n++});e.model("GlobalPlugins",t);assert.equal(2,n)});describe("disconnection of all connections",function(){describe("no callback",function(){it("works",function(e){function u(){if(--s)return;assert.equal(2,r);assert.equal(2,i);e()}var t=new Mongoose,n="mongodb://localhost/mongoose_test",r=0,i=0,s=4;t.connect(process.env.MONGOOSE_TEST_URI||n);var o=t.connection;o.on("open",function(){r++;u()});o.on("close",function(){i++;u()});var a=t.createConnection(process.env.MONGOOSE_TEST_URI||n);a.on("open",function(){r++;u()});a.on("close",function(){i++;u()});t.disconnect()});it("properly handles errors",function(){var e=new Mongoose,t="mongodb://localhost/mongoose_test";e.connect(process.env.MONGOOSE_TEST_URI||t);var n=e.connection;n.close=function(e){e(new Error("bam"))};var r={};try{e.disconnect()}catch(i){r=i}assert.equal("bam",r.message)})});it("with callback",function(e){var t=new Mongoose,n="mongodb://localhost/mongoose_test";t.connect(process.env.MONGOOSE_TEST_URI||n);t.connection.on("open",function(){t.disconnect(function(){e()})})})});describe("model()",function(){it("accessing a model that hasn't been defined",function(){var e=new Mongoose,t=!1;try{e.model("Test")}catch(n){assert.ok(/hasn't been registered/.test(n.message));t=!0}assert.equal(!0,t)});it("returns the model at creation",function(){var e=mongoose.model("Named",new Schema({name:String})),t=new e;assert.equal(t.name,null);var n=new e({name:"Peter Bjorn"});assert.equal(n.name,"Peter Bjorn");var r=new Schema({number:Number}),i=mongoose.model("Numbered",r,collection),s=new i({number:1234});assert.equal(1234,s.number.valueOf())})});it("connecting with a signature of host, database, function",function(e){var t=new Mongoose,n=process.env.MONGOOSE_TEST_URI||"mongodb://localhost/mongoose_test";n=url.parse(n);t.connect(n.hostname,n.pathname.substr(1),function(n){assert.ifError(n);t.connection.close();e()})});it("goose.connect() to a replica set",function(e){function i(){if(--r)return;e()}var t=process.env.MONGOOSE_SET_TEST_URI;if(!t){console.log("[31m","\n","You're not testing replica sets!","\n","Please set the MONGOOSE_SET_TEST_URI env variable.","\n","e.g: `mongodb://localhost:27017/db,mongodb://localhostâ€¦`","\n","[39m");return e()}var n=new Mongoose;n.connect(t,function(e){assert.ifError(e);n.model("Test",new mongoose.Schema({test:String}));var t=n.model("Test"),r=new t;r.test="aa";r.save(function(e){assert.ifError(e);t.findById(r._id,function(e,t){assert.ifError(e);assert.equal("aa",t.test);n.connection.close();i()})})});n.connection.on("fullsetup",i);var r=2});it("goose.createConnection() to a replica set",function(e){function s(){if(--i)return;e()}var t=process.env.MONGOOSE_SET_TEST_URI;if(!t)return e();var n=new Mongoose,r=n.createConnection(t,function(e){assert.ifError(e);n.model("ReplSetTwo",new mongoose.Schema({test:String}));var t=r.model("ReplSetTwo"),i=new t;i.test="aa";i.save(function(e){assert.ifError(e);t.findById(i._id,function(e,t){assert.ifError(e);assert.equal("aa",t.test);r.close();s()})})});r.on("fullsetup",s);var i=2});it("public exports",function(){assert.equal("string",typeof mongoose.version);assert.equal("function",typeof mongoose.Collection);assert.equal("function",typeof mongoose.Connection);assert.equal("function",typeof mongoose.Schema);assert.equal("function",typeof mongoose.SchemaType);assert.equal("function",typeof mongoose.Query);assert.equal("function",typeof mongoose.Promise);assert.equal("function",typeof mongoose.Model);assert.equal("function",typeof mongoose.Document)})});