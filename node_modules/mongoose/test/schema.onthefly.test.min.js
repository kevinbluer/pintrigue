var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Schema=mongoose.Schema,ObjectId=Schema.ObjectId,DecoratedSchema=new Schema({title:String},{strict:!1});mongoose.model("Decorated",DecoratedSchema);var collection="decorated_"+random();describe("schema.onthefly",function(){it("setting should cache the schema type and cast values appropriately",function(){var e=start(),t=e.model("Decorated",collection);e.close();var n=new t;n.set("adhoc","9",Number);assert.equal(9,n.get("adhoc").valueOf())});it("should be local to the particular document",function(){var e=start(),t=e.model("Decorated",collection);e.close();var n=new t;n.set("adhoc","9",Number);assert.notStrictEqual(n._path("adhoc"),undefined);var r=new t;assert.notStrictEqual(r._path("title"),undefined);assert.strictEqual(undefined,r._path("adhoc"))});it("querying a document that had an on the fly schema should work",function(e){var t=start(),n=t.model("Decorated",collection),r=new n({title:"AD HOC"});r.set("adhoc","9",Number);assert.equal(9,r.get("adhoc").valueOf());r.save(function(i){assert.ifError(i);assert.strictEqual(null,i);n.findById(r.id,function(n,r){t.close();assert.strictEqual(null,n);assert.equal(9,r.get("adhoc"));assert.equal("9",r.get("adhoc",String));assert.equal("9",r.get("adhoc"));e()})})});it("on the fly Embedded Array schemas should cast properly",function(){var e=start(),t=e.model("Decorated",collection);e.close();var n=new t;n.set("moderators",[{name:"alex trebek"}],[new Schema({name:String})]);assert.equal(n.get("moderators")[0].name,"alex trebek")});it("on the fly Embedded Array schemas should get from a fresh queried document properly",function(e){var t=start(),n=t.model("Decorated",collection),r=new n,i=new Schema({name:String,ranking:Number});r.set("moderators",[{name:"alex trebek",ranking:"1"}],[i]);assert.equal(r.get("moderators")[0].name,"alex trebek");r.save(function(s){assert.ifError(s);n.findById(r.id,function(n,r){t.close();assert.ifError(n);var s=r.get("moderators")[0].ranking;assert.equal(1,s);assert.strictEqual(undefined,s.increment);var o=r.get("moderators",[i])[0].ranking;assert.equal(1,o);var u=new Schema({name:String,ranking:String});o=r.get("moderators",[u])[0].ranking;assert.equal(1,o);e()})})});it("should support on the fly nested documents",function(){})});