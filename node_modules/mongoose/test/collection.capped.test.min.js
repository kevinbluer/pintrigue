/**
 * Module dependencies.
 */var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),Schema=mongoose.Schema,random=require("../lib/utils").random,capped=new Schema({key:"string",val:"number"});capped.set("capped",{size:1e3});var coll="capped_"+random();describe("collections: capped:",function(){it("schemas should have option size",function(){assert.ok(capped.options.capped);assert.equal(1e3,capped.options.capped.size)});it("creation",function(e){var t=start(),n=t.model("Capped",capped,coll);n.collection.isCapped(function(r,i){assert.ifError(r);assert.ok(i,"should create a capped collection");var s=t.model("Capped2",capped,coll);s.collection.isCapped(function(r,i){t.close();assert.ifError(r);assert.ok(i,"should reuse the capped collection in the db");assert.equal(n.collection.name,s.collection.name);e()})})});it("creation using a number",function(e){var t=start(),n=new Schema({key:"string"},{capped:100}),r=t.model("Capped3",n);r.collection.options(function(n,i){assert.ifError(n);assert.ok(i.capped,"should create a capped collection");assert.equal(100,i.size);var s="";for(var o=0;o<3800;++o)s+="A";r.create({key:s},function(n,i){assert.ifError(n);var o=i.id;r.count(function(n,i){assert.ifError(n);assert.equal(1,i);var u=new r({key:s});u.save(function(n,i,a){assert.ifError(n);assert.equal(1,a);r.find(function(n,r){assert.ifError(n);assert.equal(1,r.length);u=r[0];assert.notEqual(o,u.id);u.key=u.key+s;u.save(function(n){assert.ok(n);u.remove(function(n){t.close();assert.ok(n);assert.equal(10101,n.code);e()})})})})})})})});it("attempting to use existing non-capped collection as capped emits error",function(e){var t=start(),n={safe:!0},r="capped_existing_"+random();t.on("open",function(){t.db.createCollection(r,n,function(n){n&&t.close();assert.ifError(n);var i;t.on("error",function(n){clearTimeout(i);t.close();assert.ok(/non-capped collection exists/.test(n));e()});var s=t.model("CappedExisting",capped,r);i=setTimeout(function(){t.close();throw new Error("capped test timeout")},900)})})})});