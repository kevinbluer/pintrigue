/**
 * Module dependencies.
 */var mongoose=require("./common").mongoose,SchemaNumber=mongoose.Schema.Types.Number,assert=require("assert");describe("types.number",function(){it("an empty string casts to null",function(){var e=new SchemaNumber;assert.strictEqual(e.cast(""),null)});it("a null number should castForQuery to null",function(){var e=new SchemaNumber;assert.strictEqual(e.castForQuery(null),null)});it("undefined throws number cast error",function(){var e=new SchemaNumber,t;try{e.cast(undefined)}catch(n){t=n}assert.strictEqual(!0,!!t)});it("array throws cast number error",function(){var e=new SchemaNumber,t;try{e.cast([])}catch(n){t=n}assert.strictEqual(!0,!!t)});it("three throws cast number error",function(){var e=new SchemaNumber,t;try{e.cast("three")}catch(n){t=n}assert.strictEqual(!0,!!t)});it("{} throws cast number error",function(){var e=new SchemaNumber,t;try{e.cast({})}catch(n){t=n}assert.strictEqual(!0,!!t)});it("does not throw number cast error",function(){var e=new SchemaNumber,t=[1,"2","0",null,"",new String("47"),new Number(5),Number(47),9,18],n;try{for(var r=0,i=t.length;r<i;++r)e.cast(t[r])}catch(s){n=s}assert.strictEqual(!1,!!n,n)})});