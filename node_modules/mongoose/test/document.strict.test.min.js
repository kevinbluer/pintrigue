/**
 * Test dependencies.
 */var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseNumber=mongoose.Types.Number,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error;describe("document: strict mode:",function(){it("should work",function(e){var t=start(),n=new Schema({ts:{type:Date,"default":Date.now},content:String},{strict:!1}),r=new Schema({ts:{type:Date,"default":Date.now},content:String}),i=t.model("Lax",n),s=t.model("Strict",r),o=new i({content:"sample",rouge:"data"});assert.equal(!1,o._strictMode);o=o.toObject();assert.equal("sample",o.content);assert.equal("data",o.rouge);var u=new s({content:"sample",rouge:"data"});assert.equal(!0,u._strictMode);u=u.toObject();assert.ok("ts"in u);assert.equal("sample",u.content);assert.ok(!("rouge"in u));assert.ok(!u.rouge);var a=new i({content:"sample",rouge:"data"},!0);assert.ok(a._strictMode);a=a.toObject();assert.equal("sample",a.content);assert.ok(!a.rouge);assert.ok("ts"in a);var f=new s({content:"sample",rouge:"data"},!1);assert.equal(!1,f._strictMode);f=f.toObject();assert.ok("ts"in f);assert.equal("sample",f.content);assert.ok("rouge"in f);var l=new s;l.init({content:"sample",rouge:"data"});var c=l.toObject();assert.equal("sample",l.content);assert.ok(!("rouge"in l));assert.ok(!l.rouge);s.create({content:"sample2",rouge:"data"},function(n,r){t.close();assert.equal("sample2",r.content);assert.ok(!("rouge"in r));assert.ok(!r.rouge);e()})});it("nested doc",function(){var e=start(),t=new Schema({name:{last:String}},{strict:!1}),n=new Schema({name:{last:String}}),r=e.model("NestedLax",t,"nestdoc"+random()),i=e.model("NestedStrict",n,"nestdoc"+random());e.close();var s=new r;s.set("name",{last:"goose",hack:"xx"});s=s.toObject();assert.equal("goose",s.name.last);assert.equal("xx",s.name.hack);var o=new i;o.set({name:{last:"goose",hack:"xx"}});o=o.toObject();assert.equal("goose",o.name.last);assert.ok(!("hack"in o.name));assert.ok(!o.name.hack);o=new i;o.set("name",{last:"goose",hack:"xx"});o.set("shouldnt.exist",":(");o=o.toObject();assert.equal("goose",o.name.last);assert.ok(!("hack"in o.name));assert.ok(!o.name.hack);assert.ok(!o.shouldnt)});it("sub doc",function(e){var t=start(),n=new Schema({ts:{type:Date,"default":Date.now},content:String},{strict:!1}),r=new Schema({ts:{type:Date,"default":Date.now},content:String}),i=t.model("EmbeddedLax",new Schema({dox:[n]},{strict:!1}),"embdoc"+random()),s=t.model("EmbeddedStrict",new Schema({dox:[r]},{strict:!1}),"embdoc"+random()),o=new i({dox:[{content:"sample",rouge:"data"}]});assert.equal(!1,o.dox[0]._strictMode);o=o.dox[0].toObject();assert.equal("sample",o.content);assert.equal("data",o.rouge);assert.ok(o.rouge);var u=new s({dox:[{content:"sample",rouge:"data"}]});assert.equal(!0,u.dox[0]._strictMode);u=u.dox[0].toObject();assert.ok("ts"in u);assert.equal("sample",u.content);assert.ok(!("rouge"in u));assert.ok(!u.rouge);var a=new s;a.init({dox:[{content:"sample",rouge:"data"}]});var f=a.toObject();assert.equal("sample",a.dox[0].content);assert.ok(!("rouge"in a.dox[0]));assert.ok(!a.dox[0].rouge);s.create({dox:[{content:"sample2",rouge:"data"}]},function(n,r){t.close();assert.equal("sample2",r.dox[0].content);assert.ok(!("rouge"in r.dox[0]));assert.ok(!r.dox[0].rouge);e()})});it("virtuals",function(){var e=start(),t=0,n=0,r=new Schema({email:String,prop:String});r.virtual("myvirtual").get(function(){t++;return"ok"}).set(function(e){n++;this.prop=e});var i=e.model("StrictVirtual",r),s=new i({email:"hunter@skookum.com",myvirtual:"test"});e.close();assert.equal(0,t);assert.equal(1,n);s.myvirtual="anotherone";var o=s.myvirtual;assert.equal(1,t);assert.equal(2,n)})});