/**
 * Module dependencies.
 */function TestDocument(){Document.apply(this,arguments)}var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),Schema=mongoose.Schema,ObjectId=Schema.ObjectId,Document=require("../lib/document"),DocumentObjectId=mongoose.Types.ObjectId;TestDocument.prototype.__proto__=Document.prototype;var em=new Schema({title:String,body:String});em.virtual("works").get(function(){return"em virtual works"});var schema=new Schema({test:String,oids:[ObjectId],numbers:[Number],nested:{age:Number,cool:ObjectId,deep:{x:String},path:String,setr:String},nested2:{nested:String,yup:{nested:Boolean,yup:String,age:Number}},em:[em]});TestDocument.prototype._setSchema(schema);schema.virtual("nested.agePlus2").get(function(e){return this.nested.age+2});schema.virtual("nested.setAge").set(function(e){this.nested.age=e});schema.path("nested.path").get(function(e){return this.nested.age+(e?e:"")});schema.path("nested.setr").set(function(e){return e+" setter"});TestDocument.prototype.hooksTest=function(e){e(null,arguments)};describe("document: hooks:",function(){it("step order",function(e){var t=new TestDocument,n=0,r=0,i=!1;t.pre("hooksTest",function(e){n++;setTimeout(function(){assert.equal(1,n);e()},50)});t.pre("hooksTest",function(e){n++;e()});t.pre("hooksTest",!0,function(e,t){n++;assert.equal(3,n);setTimeout(function(){assert.equal(4,n)},10);setTimeout(function(){n++;t()},110);e()});t.pre("hooksTest",!0,function(e,t){n++;setTimeout(function(){assert.equal(4,n)},10);setTimeout(function(){n++;t()},110);e()});t.hooksTest(function(t){assert.ifError(t);assert.equal(6,n);e()})});it("calling next twice does not break",function(e){var t=new TestDocument,n=0,r=!1;t.pre("hooksTest",function(e){n++;e();e()});t.pre("hooksTest",function(e){n++;e()});t.hooksTest(function(t){assert.ifError(t);assert.equal(2,n);e()})});it("calling done twice does not break",function(e){var t=new TestDocument,n=0;t.pre("hooksTest",!0,function(e,t){n++;e();t();t()});t.pre("hooksTest",!0,function(e,t){n++;e();t();t()});t.hooksTest(function(t){assert.ifError(t);assert.equal(2,n);e()})});it("errors from a serial hook",function(e){var t=new TestDocument,n=0,r=!1;t.pre("hooksTest",function(e){n++;e()});t.pre("hooksTest",function(e){n++;e(new Error)});t.pre("hooksTest",function(e){n++});t.hooksTest(function(t){assert.ok(t instanceof Error);assert.equal(2,n);e()})});it("errors from last serial hook",function(e){var t=new TestDocument,n=!1;t.pre("hooksTest",function(e){e(new Error)});t.hooksTest(function(t){assert.ok(t instanceof Error);e()})});it("mutating incoming args via middleware",function(){var e=new TestDocument;e.pre("set",function(e,t,n){e(t,"altered-"+n)});e.set("test","me");assert.equal("altered-me",e.test)});it("test hooks system errors from a parallel hook",function(e){var t=new TestDocument,n=0,r=!1;t.pre("hooksTest",!0,function(e,t){n++;e();t()});t.pre("hooksTest",!0,function(e,t){n++;e();t()});t.pre("hooksTest",!0,function(e,t){n++;e();t(new Error)});t.hooksTest(function(t){assert.ok(t instanceof Error);assert.equal(3,n);e()})});it("passing two arguments to a method subject to hooks and return value",function(e){var t=new TestDocument,n=!1;t.pre("hooksTest",function(e){e()});t.hooksTest(function(t,n){assert.equal(2,n.length);assert.equal(n[1],"test");e()},"test")});it("hooking set works with document arrays (gh-746)",function(e){var t=start(),n=new Schema({text:String});n.pre("set",function(e,t,n,r){e(t,n,r)});var r=new Schema({name:String,e:[n]}),i=t.model("docArrayWithHookedSet",r),s=new i({name:"test"});s.e=[{text:"hi"}];s.save(function(n){assert.ifError(n);i.findById(s.id,function(n,r){assert.ifError(n);r.e=[{text:"bye"}];r.save(function(n){assert.ifError(n);i.findById(r.id,function(n,r){t.close();assert.ifError(n);assert.equal("bye",r.e[0].text);e()})})})})});it("pre save hooks on sub-docs should not exec after validation errors",function(e){var t=start(),n=!1,r=new Schema({text:{type:String,required:!0}});r.pre("save",function(e){n=!0;e()});var i=new Schema({name:String,e:[r]}),s=t.model("docArrayWithHookedSave",i),o=new s({name:"hi",e:[{}]});o.save(function(t){assert.ok(t);assert.ok(t.errors["e.0.text"]);assert.equal(!1,n);e()})})});