/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ObjectId=Schema.ObjectId,MongooseBuffer=mongoose.Types.Buffer,DocumentObjectId=mongoose.Types.ObjectId,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPostB=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],tags:[String],sigs:[Buffer],owners:[ObjectId],comments:[Comments],def:{type:String,"default":"kandinsky"}}),modelName="model.query.casting.blogpost",BP=mongoose.model(modelName,BlogPostB),collection="blogposts_"+random();describe("model query casting",function(){it("works",function(e){var t=start(),n=t.model(modelName,collection),r="Loki "+random(),i=new n,s=DocumentObjectId.toString(i.get("_id"));i.set("title",r);i.save(function(i){assert.ifError(i);n.findOne({_id:s},function(n,i){assert.ifError(n);assert.equal(r,i.get("title"));t.close();e()})})});it("returns cast errors",function(e){var t=start(),n=t.model(modelName,collection);n.find({date:"invalid date"},function(n){assert.ok(n instanceof Error);assert.ok(n instanceof CastError);t.close();e()})});it("casts $modifiers",function(e){var t=start(),n=t.model(modelName,collection),r=new n({meta:{visitors:-75}});r.save(function(i){assert.ifError(i);n.find({"meta.visitors":{$gt:"-100",$lt:-50}},function(n,i){assert.ifError(n);assert.ok(i);assert.equal(1,i.length);assert.equal(i[0].get("_id").toString(),r.get("_id"));assert.equal(i[0].get("meta.visitors").valueOf(),r.get("meta.visitors").valueOf());t.close();e()})})});it("casts $in values of arrays (gh-199)",function(e){var t=start(),n=t.model(modelName,collection),r=new n,i=DocumentObjectId.toString(r._id);r.save(function(r){assert.ifError(r);n.findOne({_id:{$in:[i]}},function(n,r){assert.ifError(n);assert.equal(DocumentObjectId.toString(r._id),i);t.close();e()})})});it("casts $nin values of arrays (gh-232)",function(e){var t=start(),n=new Schema({num:Number});mongoose.model("Nin",n);var r=t.model("Nin","nins_"+random());r.create({num:1},function(n,i){assert.ifError(n);r.create({num:2},function(n,i){assert.ifError(n);r.create({num:3},function(n,i){assert.ifError(n);r.find({num:{$nin:[2]}},function(n,r){assert.ifError(n);assert.equal(2,r.length);t.close();e()})})})})});it("works when finding by Date (gh-204)",function(){var e=start(),t=e.model(modelName,collection),n=new t;n.meta.date=new Date;n.save(function(r){assert.ifError(r);t.findOne({_id:n._id,"meta.date":{$lte:Date.now()}},function(r,i){assert.ifError(r);assert.equal(DocumentObjectId.toString(i._id),DocumentObjectId.toString(n._id));i.meta.date=null;i.save(function(n){assert.ifError(n);t.findById(i._id,function(t,n){e.close();assert.ifError(t);assert.strictEqual(n.meta.date,null)})})})})});it("works with $type matching",function(e){var t=start(),n=t.model(modelName,collection);n.find({title:{$type:"asd"}},function(r,i){assert.equal(r.message,"$type parameter must be Number");n.find({title:{$type:2}},function(n,r){t.close();assert.ifError(n);assert.strictEqual(Array.isArray(r),!0);e()})})});it("works when finding Boolean with $in (gh-998)",function(e){var t=start(),n=t.model(modelName,collection),r=new n({published:!0});r.save(function(t){assert.ifError(t);n.find({_id:r._id,"boolean":{$in:[null,!0]}},function(t,n){assert.ifError(t);assert.ok(n);assert.equal(n[0].id,r.id);e()})})})});