/**
 * Module dependencies.
 */function TestDoc(e){var t=function(){EmbeddedDocument.call(this,{},new DocumentArray)};t.prototype.__proto__=EmbeddedDocument.prototype;var n=new Schema({title:{type:String}});t.prototype._setSchema(e||n);return t}var start=require("./common"),mongoose=require("./common").mongoose,random=require("../lib/utils").random,MongooseArray=mongoose.Types.Array,MongooseDocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=require("../lib/types/embedded"),DocumentArray=require("../lib/types/documentarray"),Schema=mongoose.Schema,assert=require("assert"),collection="types.documentarray_"+random();describe("types.documentarray",function(){it("behaves and quakcs like an array",function(){var e=new MongooseDocumentArray;assert.ok(e instanceof Array);assert.ok(e instanceof MongooseArray);assert.ok(e instanceof MongooseDocumentArray);assert.ok(Array.isArray(e));assert.equal("Object",e._atomics.constructor.name);assert.equal("object",typeof e);var t=new MongooseArray([1,2,3,4]);assert.equal("object",typeof t);assert.equal(Object.keys(t.toObject()).length,4)});it("#id",function(){var e=TestDoc(),t=new e;t.title="Hello again to all my friends";var n=t.id,r=new MongooseDocumentArray([t]);assert.equal(r.id(n).title,"Hello again to all my friends");assert.equal(r.id(t._id).title,"Hello again to all my friends");var i=new Schema({title:{type:String},_id:{type:String,required:!0}}),e=TestDoc(i),s=new e;s.title="together we can play some rock-n-roll";s._id="a25";var o=s.id,r=new MongooseDocumentArray([s]);assert.equal(r.id(o).title,"together we can play some rock-n-roll");assert.equal(r.id(s._id).title,"together we can play some rock-n-roll");var u=new Schema({title:{type:String},_id:{type:Number,required:!0}}),e=TestDoc(u),a=new e;a.title="rock-n-roll";a._id=1995;var f=a.id,r=new MongooseDocumentArray([a]);assert.equal(r.id(f).title,"rock-n-roll");assert.equal(r.id(a._id).title,"rock-n-roll");var l=new Schema({title:{type:String}},{noId:!0}),e=TestDoc(l),c=new e;c.title="rock-n-roll";var r=new MongooseDocumentArray([c]),h=!1;try{r.id("i better not throw")}catch(p){h=p}assert.equal(!1,h);var l=new Schema({title:{type:String}},{_id:!1}),e=TestDoc(l),c=new e;c.title="rock-n-roll";var r=new MongooseDocumentArray([c]),h=!1;try{r.id("i better not throw")}catch(p){h=p}assert.equal(!1,h)});describe("inspect",function(){it("works with bad data",function(){var e=!1,t=new MongooseDocumentArray([null]);try{t.inspect()}catch(n){e=!0;console.error(n.stack)}assert.ok(!e)})});describe("toObject",function(){it("works with bad data",function(){var e=!1,t=new MongooseDocumentArray([null]);try{t.toObject()}catch(n){e=!0;console.error(n.stack)}assert.ok(!e)})});describe("EmbeddedDocumentArray",function(){describe("create()",function(){it("works",function(){var e=new MongooseDocumentArray([]);assert.equal("function",typeof e.create);var t=new Schema({docs:[new Schema({name:"string"})]}),n=mongoose.model("embeddedDocument#create_test",t,"asdfasdfa"+random()),r=new n;assert.equal("function",typeof r.docs.create);var i=r.docs.create({name:100});assert.ok(i._id);assert.equal(i.name,"100");assert.ok(i instanceof EmbeddedDocument)})})});it("#push should work on EmbeddedDocuments more than 2 levels deep",function(e){var t=new Schema;t.add({title:String,comments:[t]});var n=new Schema({title:String,comments:[t]}),r=start(),i=r.model("docarray-BlogPost",n,collection),s=new i({title:"comment nesting"}),o=s.comments.create({title:"c1"}),u=s.comments.create({title:"c2"}),a=s.comments.create({title:"c3"});s.comments.push(o);o.comments.push(u);u.comments.push(a);s.save(function(t){assert.ifError(t);i.findById(s._id,function(t,n){assert.ifError(t);var s=n.comments.create({title:"c4"});n.comments[0].comments[0].comments[0].comments.push(s);n.save(function(t){assert.ifError(t);i.findById(n._id,function(t,n){r.close();assert.ifError(t);assert.equal(n.comments[0].comments[0].comments[0].comments[0].title,"c4");e()})})})})})});