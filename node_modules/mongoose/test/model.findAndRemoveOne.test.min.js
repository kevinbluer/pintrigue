/**
 * Test dependencies.
 */var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPost=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],owners:[ObjectId],comments:[Comments]});BlogPost.virtual("titleWithAuthor").get(function(){return this.get("title")+" by "+this.get("author")}).set(function(e){var t=e.split(" by ");this.set("title",t[0]);this.set("author",t[1])});BlogPost.method("cool",function(){return this});BlogPost.static("woot",function(){return this});var modelname="UpdateOneBlogPost";mongoose.model(modelname,BlogPost);var collection="updateoneblogposts_"+random(),strictSchema=new Schema({name:String},{strict:!0});mongoose.model("UpdateOneStrictSchema",strictSchema);describe("model: findAndRemoveOne:",function(){it("returns the original document",function(e){var t=start(),n=t.model(modelname,collection),r="remove muah",i=new n({title:r});i.save(function(s){assert.ifError(s);n.findOneAndRemove({title:r},function(r,s){assert.ifError(r);assert.equal(s.id,i.id);n.findById(i.id,function(n,r){t.close();assert.ifError(n);assert.equal(null,r);e()})})})});it("options/conditions/doc are merged when no callback is passed",function(){var e=start(),t=e.model(modelname,collection);e.close();var n=new Date,r;r=t.findOneAndRemove({author:"aaron"},{select:"author"});assert.equal(1,r._fields.author);assert.equal("aaron",r._conditions.author);r=t.findOneAndRemove({author:"aaron"});assert.equal(undefined,r._fields);assert.equal("aaron",r._conditions.author);r=t.findOneAndRemove();assert.equal(undefined,r.options.new);assert.equal(undefined,r._fields);assert.equal(undefined,r._conditions.author);r=t.where("author","aaron").findOneAndRemove({date:n});assert.equal(undefined,r._fields);assert.equal(n,r._conditions.date);assert.equal("aaron",r._conditions.author);r=t.find().findOneAndRemove({author:"aaron"},{select:"author"});assert.equal(1,r._fields.author);assert.equal("aaron",r._conditions.author);r=t.find().findOneAndRemove();assert.equal(undefined,r._fields);assert.equal(undefined,r._conditions.author)});it("executes when a callback is passed",function(e){function i(n,i){assert.ifError(n);assert.equal(null,i);if(--r)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=5;n.findOneAndRemove({name:"aaron1"},{select:"name"},i);n.findOneAndRemove({name:"aaron1"},i);n.where().findOneAndRemove({name:"aaron1"},{select:"name"},i);n.where().findOneAndRemove({name:"aaron1"},i);n.where("name","aaron1").findOneAndRemove(i)});it("executed with only a callback throws",function(){var e=start(),t=e.model(modelname,collection),n;try{t.findOneAndRemove(function(){})}catch(r){n=r}e.close();assert.ok(/First argument must not be a function/.test(n))})});describe("model: findByIdAndRemove:",function(){it("executed with only a callback throws",function(){var e=start(),t=e.model(modelname,collection),n;try{t.findByIdAndRemove(function(){})}catch(r){n=r}e.close();assert.ok(/First argument must not be a function/.test(n))});it("executes when a callback is passed",function(e){function s(n,r){assert.ifError(n);assert.equal(null,r);if(--i)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=new DocumentObjectId,i=2;n.findByIdAndRemove(r,{select:"name"},s);n.findByIdAndRemove(r,s)});it("returns the original document",function(e){var t=start(),n=t.model(modelname,collection),r="remove muah pleez",i=new n({title:r});i.save(function(r){assert.ifError(r);n.findByIdAndRemove(i.id,function(r,s){assert.ifError(r);assert.equal(s.id,i.id);n.findById(i.id,function(n,r){t.close();assert.ifError(n);assert.equal(null,r);e()})})})});it("options/conditions/doc are merged when no callback is passed",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndRemove(n,{select:"author"});assert.equal(1,i._fields.author);assert.equal(n.toString(),i._conditions._id.toString());i=t.findByIdAndRemove(n.toString());assert.equal(undefined,i._fields);assert.equal(n.toString(),i._conditions._id);i=t.findByIdAndRemove();assert.equal(undefined,i.options.new);assert.equal(undefined,i._fields);assert.equal(undefined,i._conditions._id)});it("supports v3 select string syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndRemove(n,{select:"author -title"});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title);i=t.findOneAndRemove({},{select:"author -title"});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title)});it("supports v3 select object syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndRemove(n,{select:{author:1,title:0}});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title);i=t.findOneAndRemove({},{select:{author:1,title:0}});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title)});it("supports v3 sort string syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndRemove(n,{sort:"author -title"});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1]);i=t.findOneAndRemove({},{sort:"author -title"});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1])});it("supports v3 sort object syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndRemove(n,{sort:{author:1,title:-1}});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1]);i=t.findOneAndRemove(n,{sort:{author:1,title:-1}});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1])})});