/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPost=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],owners:[ObjectId],comments:[Comments]});BlogPost.virtual("titleWithAuthor").get(function(){return this.get("title")+" by "+this.get("author")}).set(function(e){var t=e.split(" by ");this.set("title",t[0]);this.set("author",t[1])});BlogPost.method("cool",function(){return this});BlogPost.static("woot",function(){return this});var modelname="UpdateOneBlogPost";mongoose.model(modelname,BlogPost);var collection="updateoneblogposts_"+random(),strictSchema=new Schema({name:String},{strict:!0});mongoose.model("UpdateOneStrictSchema",strictSchema);var strictThrowSchema=new Schema({name:String},{strict:"throw"});mongoose.model("UpdateOneStrictThrowSchema",strictThrowSchema);describe("model: findOneAndUpdate:",function(){it("returns the edited document",function(e){var t=start(),n=t.model(modelname,collection),r="Tobi "+random(),i="Brian "+random(),s="Woot "+random(),o=new DocumentObjectId,u=new DocumentObjectId,a=new n;a.set("title",r);a.author=i;a.meta.visitors=0;a.date=new Date;a.published=!0;a.mixed={x:"ex"};a.numbers=[4,5,6,7];a.owners=[o,u];a.comments=[{body:"been there"},{body:"done that"}];a.save(function(f){assert.ifError(f);n.findById(a._id,function(f,l){assert.ifError(f);assert.equal(r,l.title);assert.equal(i,l.author);assert.equal(0,l.meta.visitors.valueOf());assert.equal(a.date.toString(),l.date);assert.equal(!0,l.published);assert.equal("ex",l.mixed.x);assert.deepEqual([4,5,6,7],l.numbers.toObject());assert.equal(2,l.owners.length);assert.equal(o.toString(),l.owners[0].toString());assert.equal(u.toString(),l.owners[1].toString());assert.equal(2,l.comments.length);assert.equal("been there",l.comments[0].body);assert.equal("done that",l.comments[1].body);assert.ok(l.comments[0]._id);assert.ok(l.comments[1]._id);assert.ok(l.comments[0]._id instanceof DocumentObjectId);assert.ok(l.comments[1]._id instanceof DocumentObjectId);var c={title:s,$inc:{"meta.visitors":2},$set:{date:new Date},published:!1,mixed:{x:"ECKS",y:"why"},$pullAll:{numbers:[4,6]},$pull:{owners:o},"comments.1.body":8};n.findOneAndUpdate({title:r},c,function(n,r){t.close();assert.equal(n,null,n&&n.stack);assert.equal(s,r.title);assert.equal(i,r.author);assert.equal(2,r.meta.visitors.valueOf());assert.equal(c.$set.date.toString(),r.date.toString());assert.equal(!1,r.published);assert.equal("ECKS",r.mixed.x);assert.equal("why",r.mixed.y);assert.deepEqual([5,7],r.numbers.toObject());assert.equal(1,r.owners.length);assert.equal(u.toString(),r.owners[0].toString());assert.equal("been there",r.comments[0].body);assert.equal("8",r.comments[1].body);assert.ok(r.comments[0]._id);assert.ok(r.comments[1]._id);assert.ok(r.comments[0]._id instanceof DocumentObjectId);assert.ok(r.comments[1]._id instanceof DocumentObjectId);e()})})})});it("returns the original document",function(e){var t=start(),n=t.model(modelname,collection),r="Tobi "+random(),i="Brian "+random(),s="Woot "+random(),o=new DocumentObjectId,u=new DocumentObjectId,a=new n;a.set("title",r);a.author=i;a.meta.visitors=0;a.date=new Date;a.published=!0;a.mixed={x:"ex"};a.numbers=[4,5,6,7];a.owners=[o,u];a.comments=[{body:"been there"},{body:"done that"}];a.save(function(i){assert.ifError(i);n.findById(a._id,function(i,u){assert.ifError(i);var f={title:s,$inc:{"meta.visitors":2},$set:{date:new Date},published:!1,mixed:{x:"ECKS",y:"why"},$pullAll:{numbers:[4,6]},$pull:{owners:o},"comments.1.body":8};n.findOneAndUpdate({title:r},f,{"new":!1},function(n,r){t.close();assert.ifError(n);assert.equal(a.title,r.title);assert.equal(a.author,r.author);assert.equal(a.meta.visitors,r.meta.visitors.valueOf());assert.equal(r.date.toString(),a.date.toString());assert.equal(r.published,a.published);assert.equal(r.mixed.x,a.mixed.x);assert.equal(r.mixed.y,a.mixed.y);assert.deepEqual(r.numbers.toObject(),a.numbers.toObject());assert.equal(r.owners.length,a.owners.length);assert.equal(r.owners[0].toString(),a.owners[0].toString());assert.equal(r.comments[0].body,a.comments[0].body);assert.equal(r.comments[1].body,a.comments[1].body);assert.ok(r.comments[0]._id);assert.ok(r.comments[1]._id);assert.ok(r.comments[0]._id instanceof DocumentObjectId);assert.ok(r.comments[1]._id instanceof DocumentObjectId);e()})})})});it("allows upserting",function(e){var t=start(),n=t.model(modelname,collection),r="Tobi "+random(),i="Brian "+random(),s="Woot "+random(),o=new DocumentObjectId,u=new DocumentObjectId,a=new n;a.set("title",r);a.author=i;a.meta.visitors=0;a.date=new Date;a.published=!0;a.mixed={x:"ex"};a.numbers=[4,5,6,7];a.owners=[o,u];a.comments=[{body:"been there"},{body:"done that"}];var f={title:s,$inc:{"meta.visitors":2},$set:{date:new Date},published:!1,mixed:{x:"ECKS",y:"why"},$pullAll:{numbers:[4,6]},$pull:{owners:o}};n.findOneAndUpdate({title:r},f,{upsert:!0,"new":!0},function(n,r){t.close();assert.ifError(n);assert.equal(s,r.title);assert.equal(2,r.meta.visitors.valueOf());assert.equal(r.date.toString(),f.$set.date.toString());assert.equal(f.published,r.published);assert.deepEqual(f.mixed.x,r.mixed.x);assert.strictEqual(r.mixed.y,f.mixed.y);assert.ok(Array.isArray(r.numbers));assert.ok(Array.isArray(r.owners));assert.strictEqual(0,r.numbers.length);assert.strictEqual(0,r.owners.length);e()})});it("options/conditions/doc are merged when no callback is passed",function(){var e=start(),t=e.model(modelname,collection);e.close();var n=new Date,r;r=t.findOneAndUpdate({author:"aaron"},{$set:{date:n}},{"new":!1,fields:"author"});assert.strictEqual(!1,r.options.new);assert.strictEqual(1,r._fields.author);assert.equal(n,r._updateArg.$set.date);assert.strictEqual("aaron",r._conditions.author);r=t.findOneAndUpdate({author:"aaron"},{$set:{date:n}});assert.strictEqual(undefined,r.options.new);assert.equal(n,r._updateArg.$set.date);assert.strictEqual("aaron",r._conditions.author);r=t.findOneAndUpdate({$set:{date:n}});assert.strictEqual(undefined,r.options.new);assert.equal(n,r._updateArg.$set.date);assert.strictEqual(undefined,r._conditions.author);r=t.findOneAndUpdate();assert.strictEqual(undefined,r.options.new);assert.equal(undefined,r._updateArg.date);assert.strictEqual(undefined,r._conditions.author);r=t.where("author","aaron").findOneAndUpdate({date:n});assert.strictEqual(undefined,r.options.new);assert.equal(n,r._updateArg.date);assert.strictEqual("aaron",r._conditions.author);r=t.find().findOneAndUpdate({author:"aaron"},{date:n});assert.strictEqual(undefined,r.options.new);assert.equal(n,r._updateArg.date);assert.strictEqual("aaron",r._conditions.author);r=t.find().findOneAndUpdate({date:n});assert.strictEqual(undefined,r.options.new);assert.equal(n,r._updateArg.date);assert.strictEqual(undefined,r._conditions.author);r=t.find().findOneAndUpdate();assert.strictEqual(undefined,r.options.new);assert.equal(undefined,r._updateArg.date);assert.strictEqual(undefined,r._conditions.author)});it("executes when a callback is passed",function(e){function i(n,i){assert.ifError(n);assert.strictEqual(null,i);if(--r)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=6;n.findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},{"new":!1},i);n.findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},i);n.where().findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},{"new":!1},i);n.where().findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},i);n.where().findOneAndUpdate({$set:{name:"Aaron"}},i);n.where("name","aaron").findOneAndUpdate({$set:{name:"Aaron"}}).findOneAndUpdate(i)});it("executes when a callback is passed to a succeeding function",function(e){function i(n,i){assert.ifError(n);assert.strictEqual(null,i);if(--r)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=6;n.findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},{"new":!1}).exec(i);n.findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}}).exec(i);n.where().findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}},{"new":!1}).exec(i);n.where().findOneAndUpdate({name:"aaron"},{$set:{name:"Aaron"}}).exec(i);n.where().findOneAndUpdate({$set:{name:"Aaron"}}).exec(i);n.where("name","aaron").findOneAndUpdate({$set:{name:"Aaron"}}).exec(i)});it("executing with only a callback throws",function(){var e=start(),t=e.model(modelname,collection),n;try{t.findOneAndUpdate(function(){})}catch(r){n=r}e.close();assert.ok(/First argument must not be a function/.test(n))});it("updates numbers atomically",function(e){var t=start(),n=t.model(modelname,collection),r=4,i=[],s=new n;s.set("meta.visitors",5);s.save(function(i){function u(){n.findOne({_id:s.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(9,r.get("meta.visitors"));e()})}assert.ifError(i);for(var o=0;o<4;++o)n.findOneAndUpdate({_id:s._id},{$inc:{"meta.visitors":1}},function(e){assert.ifError(e);--r||u()})})});it("honors strict schemas",function(e){var t=start(),n=t.model("UpdateOneStrictSchema"),r=new n({name:"orange crush"});r.save(function(i){assert.ifError(i);var o=Date.now();n.findOneAndUpdate({name:o},{ignore:!0},{upsert:!0},function(i,u){assert.ifError(i);assert.ok(u);assert.ok(u._id);assert.equal(undefined,u.ignore);assert.equal(undefined,u._doc.ignore);assert.equal(o,u.name);n.findOneAndUpdate({_id:r._id},{ignore:!0},{upsert:!0},function(i,o){assert.ifError(i);assert.ok(!o.ignore);assert.ok(!o._doc.ignore);assert.equal("orange crush",o.name,"doc was not overwritten with {} during upsert");n.findOneAndUpdate({_id:r._id},{ignore:!0},function(n,r){t.close();assert.ifError(n);assert.ok(!r.ignore);assert.ok(!r._doc.ignore);assert.equal("orange crush",r.name);e()})})})})});it("returns errors with strict:throw schemas",function(e){var t=start(),n=t.model("UpdateOneStrictThrowSchema"),r=new n({name:"orange crush"});r.save(function(i){assert.ifError(i);var o=Date.now();n.findOneAndUpdate({name:o},{ignore:!0},{upsert:!0},function(i,o){assert.ok(i);assert.ok(/not in schema/.test(i));assert.ok(!o);n.findOneAndUpdate({_id:r._id},{ignore:!0},function(n,r){t.close();assert.ok(n);assert.ok(/not in schema/.test(n));assert.ok(!r);e()})})})})});describe("model: findByIdAndUpdate:",function(){it("executing with just a callback throws",function(){var e=start(),t=e.model(modelname,collection),n;try{t.findByIdAndUpdate(function(){})}catch(r){n=r}e.close();assert.ok(/First argument must not be a function/.test(n))});it("executes when a callback is passed",function(e){function s(n,r){assert.ifError(n);assert.strictEqual(null,r);if(--i)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=new DocumentObjectId,i=2;n.findByIdAndUpdate(r,{$set:{name:"Aaron"}},{"new":!1},s);n.findByIdAndUpdate(r,{$set:{name:"changed"}},s)});it("executes when a callback is passed to a succeeding function",function(e){function s(n,r){assert.ifError(n);assert.strictEqual(null,r);if(--i)return;t.close();e()}var t=start(),n=t.model(modelname,collection+random()),r=new DocumentObjectId,i=2;n.findByIdAndUpdate(r,{$set:{name:"Aaron"}},{"new":!1}).exec(s);n.findByIdAndUpdate(r,{$set:{name:"changed"}}).exec(s)});it("returns the original document",function(e){var t=start(),n=t.model(modelname,collection),r="Tobi "+random(),i="Brian "+random(),s="Woot "+random(),o=new DocumentObjectId,u=new DocumentObjectId,a=new n;a.set("title",r);a.author=i;a.meta.visitors=0;a.date=new Date;a.published=!0;a.mixed={x:"ex"};a.numbers=[4,5,6,7];a.owners=[o,u];a.comments=[{body:"been there"},{body:"done that"}];a.save(function(r){assert.ifError(r);n.findById(a._id,function(r,i){assert.ifError(r);var u={title:s,$inc:{"meta.visitors":2},$set:{date:new Date},published:!1,mixed:{x:"ECKS",y:"why"},$pullAll:{numbers:[4,6]},$pull:{owners:o},"comments.1.body":8};n.findByIdAndUpdate(a.id,u,{"new":!1},function(n,r){t.close();assert.ifError(n);assert.equal(r.title,a.title);assert.equal(r.author,a.author);assert.equal(r.meta.visitors.valueOf(),a.meta.visitors);assert.equal(r.date.toString(),a.date.toString());assert.equal(r.published,a.published);assert.equal(r.mixed.x,a.mixed.x);assert.strictEqual(r.mixed.y,a.mixed.y);assert.deepEqual(r.numbers.toObject(),a.numbers.toObject());assert.equal(r.owners.length,a.owners.length);assert.equal(r.owners[0].toString(),a.owners[0].toString());assert.equal(r.comments[0].body,a.comments[0].body);assert.equal(r.comments[1].body,a.comments[1].body);assert.ok(r.comments[0]._id);assert.ok(r.comments[1]._id);assert.ok(r.comments[0]._id instanceof DocumentObjectId);assert.ok(r.comments[1]._id instanceof DocumentObjectId);e()})})})});it("options/conditions/doc are merged when no callback is passed",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndUpdate(n,{$set:{date:r}},{"new":!1,fields:"author"});assert.strictEqual(!1,i.options.new);assert.strictEqual(1,i._fields.author);assert.equal(r,i._updateArg.$set.date);assert.strictEqual(n.toString(),i._conditions._id.toString());i=t.findByIdAndUpdate(n,{$set:{date:r}});assert.strictEqual(undefined,i.options.new);assert.equal(r,i._updateArg.$set.date);assert.strictEqual(n.toString(),i._conditions._id.toString());i=t.findByIdAndUpdate(n);assert.strictEqual(undefined,i.options.new);assert.strictEqual(n,i._conditions._id);i=t.findByIdAndUpdate();assert.strictEqual(undefined,i.options.new);assert.equal(undefined,i._updateArg.date);assert.strictEqual(undefined,i._conditions._id)});it("supports v3 select string syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndUpdate(n,{$set:{date:r}},{select:"author -title"});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title);i=t.findOneAndUpdate({},{$set:{date:r}},{select:"author -title"});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title)});it("supports v3 select object syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndUpdate(n,{$set:{date:r}},{select:{author:1,title:0}});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title);i=t.findOneAndUpdate({},{$set:{date:r}},{select:{author:1,title:0}});assert.strictEqual(1,i._fields.author);assert.strictEqual(0,i._fields.title)});it("supports v3 sort string syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndUpdate(n,{$set:{date:r}},{sort:"author -title"});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1]);i=t.findOneAndUpdate({},{$set:{date:r}},{sort:"author -title"});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1])});it("supports v3 sort object syntax",function(){var e=start(),t=e.model(modelname,collection),n=new DocumentObjectId;e.close();var r=new Date,i;i=t.findByIdAndUpdate(n,{$set:{date:r}},{sort:{author:1,title:-1}});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1]);i=t.findOneAndUpdate(n,{$set:{date:r}},{sort:{author:1,title:-1}});assert.equal(2,i.options.sort.length);assert.equal("author",i.options.sort[0][0]);assert.equal(1,i.options.sort[0][1]);assert.equal("title",i.options.sort[1][0]);assert.equal(-1,i.options.sort[1][1])})});