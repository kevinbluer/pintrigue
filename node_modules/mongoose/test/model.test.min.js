/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPost=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],owners:[ObjectId],comments:[Comments],nested:{array:[Number]}});BlogPost.virtual("titleWithAuthor").get(function(){return this.get("title")+" by "+this.get("author")}).set(function(e){var t=e.split(" by ");this.set("title",t[0]);this.set("author",t[1])});BlogPost.method("cool",function(){return this});BlogPost.static("woot",function(){return this});mongoose.model("BlogPost",BlogPost);var collection="blogposts_"+random();describe("model",function(){describe("constructor",function(){it('works without "new" keyword',function(){var e=mongoose.model("BlogPost"),t=e();assert.ok(t instanceof e);var n=start();e=n.model("BlogPost");n.close();t=e();assert.ok(t instanceof e)});it('works "new" keyword',function(){var e=mongoose.model("BlogPost"),t=new e;assert.ok(t instanceof e);var n=start();e=n.model("BlogPost");n.close();t=new e;assert.ok(t instanceof e)})});describe("isNew",function(){it("is true on instantiation",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t;assert.equal(!0,n.isNew)});it("on parent and subdocs on failed inserts",function(e){var t=start(),n=new Schema({name:{type:String,unique:!0},em:[new Schema({x:Number})]},{collection:"testisnewonfail_"+random()}),r=t.model("isNewOnFail",n);r.on("index",function(){var n=new r({name:"i am new",em:[{x:1}]});n.save(function(i){assert.ifError(i);assert.equal(n.isNew,!1);assert.equal(n.em[0].isNew,!1);var s=new r({name:"i am new",em:[{x:2}]});s.save(function(n){t.close();assert.ok(n);assert.equal(s.isNew,!0);assert.equal(s.em[0].isNew,!0);e()})})})})});describe("schema:",function(){it("should exist",function(){var e=start(),t=e.model("BlogPost",collection);e.close();assert.ok(t.schema instanceof Schema);assert.ok(t.prototype.schema instanceof Schema)});it("emits init event",function(){var e=start(),t=new Schema({name:String}),n;t.on("init",function(e){n=e});var r=e.model("EmitInitOnSchema",t);e.close();assert.equal(n,r)})});describe("structure",function(){it("default when instantiated",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t;assert.equal(n.db.model("BlogPost").modelName,"BlogPost");assert.equal(n.constructor.modelName,"BlogPost");assert.ok(n.get("_id")instanceof DocumentObjectId);assert.equal(undefined,n.get("title"));assert.equal(undefined,n.get("slug"));assert.equal(undefined,n.get("date"));assert.equal("object",typeof n.get("meta"));assert.deepEqual(n.get("meta"),{});assert.equal(undefined,n.get("meta.date"));assert.equal(undefined,n.get("meta.visitors"));assert.equal(undefined,n.get("published"));assert.equal(1,Object.keys(n.get("nested")).length);assert.ok(Array.isArray(n.get("nested").array));assert.ok(n.get("numbers")instanceof MongooseArray);assert.ok(n.get("owners")instanceof MongooseArray);assert.ok(n.get("comments")instanceof DocumentArray);assert.ok(n.get("nested.array")instanceof MongooseArray)});describe("array",function(){describe("defaults",function(){it("to a non-empty array",function(){var e=start(),t=new Schema({arr:{type:Array,cast:String,"default":["a","b","c"]},single:{type:Array,cast:String,"default":["a"]}});mongoose.model("DefaultArray",t);var n=e.model("DefaultArray",collection),r=new n;e.close();assert.equal(r.get("arr").length,3);assert.equal(r.get("arr")[0],"a");assert.equal(r.get("arr")[1],"b");assert.equal(r.get("arr")[2],"c");assert.equal(r.get("single").length,1);assert.equal(r.get("single")[0],"a")});it("empty",function(){var e=start(),t=new Schema({arr:{type:Array,cast:String,"default":[]},auto:[Number]});mongoose.model("DefaultZeroCardArray",t);var n=e.model("DefaultZeroCardArray",collection);e.close();var r=new n;assert.equal(r.get("arr").length,0);assert.equal(r.arr.length,0);assert.equal(r.auto.length,0)})})});it("a hash with one null value",function(){var e=start(),t=e.model("BlogPost",collection),n=new t({title:null});e.close();assert.strictEqual(null,n.title)});it("when saved",function(e){function i(){if(--r)return;t.close();e()}var t=start(),n=t.model("BlogPost",collection),r=2,s=new n;s.on("save",function(e){assert.ok(e.get("_id")instanceof DocumentObjectId);assert.equal(undefined,e.get("title"));assert.equal(undefined,e.get("slug"));assert.equal(undefined,e.get("date"));assert.equal(undefined,e.get("published"));assert.equal(typeof e.get("meta"),"object");assert.deepEqual(e.get("meta"),{});assert.equal(undefined,e.get("meta.date"));assert.equal(undefined,e.get("meta.visitors"));assert.ok(e.get("owners")instanceof MongooseArray);assert.ok(e.get("comments")instanceof DocumentArray);i()});s.save(function(e,t){assert.ifError(e);assert.ok(t.get("_id")instanceof DocumentObjectId);assert.equal(undefined,t.get("title"));assert.equal(undefined,t.get("slug"));assert.equal(undefined,t.get("date"));assert.equal(undefined,t.get("published"));assert.equal(typeof t.get("meta"),"object");assert.deepEqual(t.get("meta"),{});assert.equal(undefined,t.get("meta.date"));assert.equal(undefined,t.get("meta.visitors"));assert.ok(t.get("owners")instanceof MongooseArray);assert.ok(t.get("comments")instanceof DocumentArray);i()})});describe("init",function(){it("works",function(){var e=start(),t=e.model("BlogPost",collection),n=new t;e.close();n.init({title:"Test",slug:"test",date:new Date,meta:{date:new Date,visitors:5},published:!0,owners:[new DocumentObjectId,new DocumentObjectId],comments:[{title:"Test",date:new Date,body:"Test"},{title:"Super",date:new Date,body:"Cool"}]});assert.equal(n.get("title"),"Test");assert.equal(n.get("slug"),"test");assert.ok(n.get("date")instanceof Date);assert.equal("object",typeof n.get("meta"));assert.ok(n.get("meta").date instanceof Date);assert.equal(typeof n.get("meta").visitors,"number");assert.equal(n.get("published"),!0);assert.equal(n.title,"Test");assert.equal(n.slug,"test");assert.ok(n.date instanceof Date);assert.equal(typeof n.meta,"object");assert.ok(n.meta.date instanceof Date);assert.equal(typeof n.meta.visitors,"number");assert.equal(n.published,!0);assert.ok(n.get("owners")instanceof MongooseArray);assert.ok(n.get("owners")[0]instanceof DocumentObjectId);assert.ok(n.get("owners")[1]instanceof DocumentObjectId);assert.ok(n.owners instanceof MongooseArray);assert.ok(n.owners[0]instanceof DocumentObjectId);assert.ok(n.owners[1]instanceof DocumentObjectId);assert.ok(n.get("comments")instanceof DocumentArray);assert.ok(n.get("comments")[0]instanceof EmbeddedDocument);assert.ok(n.get("comments")[1]instanceof EmbeddedDocument);assert.ok(n.comments instanceof DocumentArray);assert.ok(n.comments[0]instanceof EmbeddedDocument);assert.ok(n.comments[1]instanceof EmbeddedDocument)});it("partially",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t;n.init({title:"Test",slug:"test",date:new Date});assert.equal(n.get("title"),"Test");assert.equal(n.get("slug"),"test");assert.ok(n.get("date")instanceof Date);assert.equal("object",typeof n.get("meta"));assert.deepEqual(n.get("meta"),{});assert.equal(undefined,n.get("meta.date"));assert.equal(undefined,n.get("meta.visitors"));assert.equal(undefined,n.get("published"));assert.ok(n.get("owners")instanceof MongooseArray);assert.ok(n.get("comments")instanceof DocumentArray)});it("with partial hash",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t({meta:{date:new Date,visitors:5}});assert.equal(5,n.get("meta.visitors").valueOf())});it("isNew on embedded documents",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t;n.init({title:"Test",slug:"test",comments:[{title:"Test",date:new Date,body:"Test"}]});assert.equal(!1,n.get("comments")[0].isNew)});it("isNew on embedded documents after saving",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({title:"hocus pocus"});r.comments.push({title:"Humpty Dumpty",comments:[{title:"nested"}]});assert.equal(!0,r.get("comments")[0].isNew);assert.equal(!0,r.get("comments")[0].comments[0].isNew);r.invalidate("title");r.save(function(n){assert.equal(!0,r.isNew);assert.equal(!0,r.get("comments")[0].isNew);assert.equal(!0,r.get("comments")[0].comments[0].isNew);r.save(function(n){t.close();assert.strictEqual(null,n);assert.equal(!1,r.isNew);assert.equal(!1,r.get("comments")[0].isNew);assert.equal(!1,r.get("comments")[0].comments[0].isNew);e()})})})})});it("collection name can be specified through schema",function(){var e=new Schema({name:String},{collection:"users1"}),t=mongoose.model("CollectionNamedInSchema1",e);assert.equal(t.prototype.collection.name,"users1");var n=start(),r=new Schema({name:String},{collection:"users2"}),i=n.model("CollectionNamedInSchema2",r);n.close();assert.equal(i.prototype.collection.name,"users2")});it("saving a model with a null value should perpetuate that null value to the db",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({title:null});assert.strictEqual(null,r.title);r.save(function(i){assert.strictEqual(i,null);n.findById(r.id,function(n,r){t.close();assert.strictEqual(n,null);assert.strictEqual(r.title,null);e()})})});it("instantiating a model with a hash that maps to at least 1 undefined value",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({title:undefined});assert.strictEqual(undefined,r.title);r.save(function(i){assert.strictEqual(null,i);n.findById(r.id,function(n,r){t.close();assert.strictEqual(n,null);assert.strictEqual(r.title,undefined);e()})})});it("modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)",function(e){var t=start(),n=new Schema({nested:{num:Number}}),r=t.model("NestedObjectWithMongooseNumber",n),i=new r;i.nested=null;i.save(function(n){assert.ifError(n);r.findById(i,function(n,r){assert.ifError(n);r.nested.num=5;r.save(function(n){t.close();assert.ifError(n);e()})})})});it("no RangeError on remove() of a doc with Number _id (gh-714)",function(e){var t=start(),n=new Schema({_id:{type:Number},name:String}),r=t.model("MyModel",n,"numberrangeerror"+random()),i=new r({name:"test",_id:35});i.save(function(n){assert.ifError(n);r.findById(35,function(n,r){assert.ifError(n);r.remove(function(n){t.close();assert.ifError(n);e()})})})});it("over-writing a number should persist to the db (gh-342)",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({meta:{date:new Date,visitors:10}});r.save(function(i){assert.ifError(i);r.set("meta.visitors",20);r.save(function(i){assert.ifError(i);n.findById(r.id,function(n,r){assert.ifError(n);assert.equal(20,r.get("meta.visitors").valueOf());t.close();e()})})})});describe("methods",function(){it("can be defined",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new t;assert.equal(n,n.cool())});it("can be defined on embedded documents",function(){var e=start(),t=new Schema({name:String});t.method("talk",function(){return"gaga"});var n=new Schema({children:[t]}),r=e.model("ChildA",t,"children_"+random()),i=e.model("ParentA",n,"parents_"+random());e.close();var s=new r;assert.equal("function",typeof s.talk);var o=new i;o.children.push({});assert.equal("function",typeof o.children[0].talk)})});describe("statics",function(){it("can be defined",function(){var e=start(),t=e.model("BlogPost",collection);e.close();assert.equal(t,t.woot())})});describe("casting",function(){it("error",function(e){var t=start(),n=t.model("BlogPost",collection),r=!1,i=new n;try{i.init({date:"Test"})}catch(s){r=!0}assert.equal(!1,r);try{i.set("title","Test")}catch(s){r=!0}assert.equal(!1,r);i.save(function(n){t.close();assert.ok(n instanceof MongooseError);assert.ok(n instanceof CastError);e()})});it("nested error",function(e){var t=start(),n=t.model("BlogPost",collection),r=!1,i=new n;try{i.init({meta:{date:"Test"}})}catch(s){r=!0}assert.equal(!1,r);try{i.set("meta.date","Test")}catch(s){r=!0}assert.equal(!1,r);i.save(function(n){t.close();assert.ok(n instanceof MongooseError);assert.ok(n instanceof CastError);e()})});it("subdocument error",function(e){var t=start(),n=t.model("BlogPost",collection),r=!1,i=new n;i.init({title:"Test",slug:"test",comments:[{title:"Test",date:new Date,body:"Test"}]});i.get("comments")[0].set("date","invalid");i.save(function(n){t.close();assert.ok(n instanceof MongooseError);assert.ok(n instanceof CastError);e()})});it("subdocument error when adding a subdoc",function(e){var t=start(),n=t.model("BlogPost",collection),r=!1,i=new n;try{i.get("comments").push({date:"Bad date"})}catch(s){r=!0}assert.equal(!1,r);i.save(function(n){t.close();assert.ok(n instanceof MongooseError);assert.ok(n instanceof CastError);e()})});it("updates",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.set("title","1");var i=r.get("_id");r.save(function(s){assert.ifError(s);n.update({title:1,_id:i},{title:2},function(i){assert.ifError(i);n.findOne({_id:r.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(r.get("title"),"2");e()})})})});it("$pull",function(){var e=start(),t=e.model("BlogPost",collection),n=new t;e.close();n.get("numbers").push("3");assert.equal(n.get("numbers")[0],3)});it("$push",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.get("numbers").push(1,2,3,4);r.save(function(i){n.findById(r.get("_id"),function(r,i){assert.equal(i.get("numbers").length,4);i.get("numbers").pull("3");i.save(function(r){n.findById(i.get("_id"),function(n,r){t.close();assert.ifError(n);assert.equal(r.get("numbers").length,3);e()})})})})});it("Number arrays",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.numbers.push(1,"2",3);r.save(function(i){assert.strictEqual(i,null);n.findById(r._id,function(n,r){assert.ifError(n);assert.ok(~r.numbers.indexOf(1));assert.ok(~r.numbers.indexOf(2));assert.ok(~r.numbers.indexOf(3));t.close();e()})})});it("date casting compat with datejs (gh-502)",function(e){var t=start();Date.prototype.toObject=function(){return{millisecond:86,second:42,minute:47,hour:17,day:13,week:50,month:11,year:2011}};var n=new Schema({name:String,description:String,sabreId:String,data:{lastPrice:Number,comm:String,curr:String,rateName:String},created:{type:Date,"default":Date.now},valid:{type:Boolean,"default":!0}}),r=t.model("gh502",n),i=new r;i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,i){assert.ifError(n);i.save(function(n){assert.ifError(n);r.remove(function(n){t.close();delete Date.prototype.toObject;assert.ifError(n);e()})})})})})});describe("validation",function(){it("works",function(e){function t(e){assert.equal("correct",this.asyncScope);return!0}function n(e,t){assert.equal("correct",this.scope);process.nextTick(function(){t(!0)})}mongoose.model("TestValidation",new Schema({simple:{type:String,required:!0},scope:{type:String,validate:[t,"scope failed"],required:!0},asyncScope:{type:String,validate:[n,"async scope failed"],required:!0}}));var r=start(),i=r.model("TestValidation"),s=new i;s.set("simple","");s.set("scope","correct");s.set("asyncScope","correct");s.save(function(t){assert.ok(t instanceof MongooseError);assert.ok(t instanceof ValidationError);s.set("simple","here");s.save(function(t){r.close();assert.ifError(t);e()})})});it("custom messaging",function(e){function t(e){return e==="abc"}mongoose.model("TestValidationMessage",new Schema({simple:{type:String,validate:[t,"must be abc"]}}));var n=start(),r=n.model("TestValidationMessage"),i=new r;i.set("simple","");i.save(function(t){assert.ok(t instanceof MongooseError);assert.ok(t instanceof ValidationError);assert.ok(t.errors.simple instanceof ValidatorError);assert.equal(t.errors.simple.message,'Validator "must be abc" failed for path simple');assert.equal(i.errors.simple.message,'Validator "must be abc" failed for path simple');i.set("simple","abc");i.save(function(t){n.close();assert.ifError(t);e()})})});it("with Model.schema.path introspection (gh-272)",function(e){var t=start(),n=new Schema({name:String}),r=t.model("IntrospectionValidation",n,"introspections_"+random());r.schema.path("name").validate(function(e){return e.length<2},"Name cannot be greater than 1 character");var i=new r({name:"hi"});i.save(function(n){t.close();assert.equal(n.errors.name.message,'Validator "Name cannot be greater than 1 character" failed for path name');assert.equal(n.name,"ValidationError");assert.equal(n.message,"Validation failed");e()})});it("of required undefined values",function(e){mongoose.model("TestUndefinedValidation",new Schema({simple:{type:String,required:!0}}));var t=start(),n=t.model("TestUndefinedValidation"),r=new n;r.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);r.set("simple","here");r.save(function(n){t.close();assert.ifError(n);e()})})});it("save callback should only execute once (gh-319)",function(e){var t=start(),n=t.model("CallbackFiresOnceValidation",new Schema({username:{type:String,validate:/^[a-z]{6}$/i},email:{type:String,validate:/^[a-z]{6}$/i},password:{type:String,validate:/^[a-z]{6}$/i}})),r=new n({username:"nope",email:"too",password:"short"}),i=0;r.save(function(n){t.close();assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.equal(1,++i);assert.equal(Object.keys(n.errors).length,3);assert.ok(n.errors.password instanceof ValidatorError);assert.ok(n.errors.email instanceof ValidatorError);assert.ok(n.errors.username instanceof ValidatorError);assert.equal(n.errors.password.message,"Validator failed for path password");assert.equal(n.errors.email.message,"Validator failed for path email");assert.equal(n.errors.username.message,"Validator failed for path username");assert.equal(Object.keys(r.errors).length,3);assert.ok(r.errors.password instanceof ValidatorError);assert.ok(r.errors.email instanceof ValidatorError);assert.ok(r.errors.username instanceof ValidatorError);assert.equal(r.errors.password.message,"Validator failed for path password");assert.equal(r.errors.email.message,"Validator failed for path email");assert.equal(r.errors.username.message,"Validator failed for path username");e()})});it("query result",function(e){mongoose.model("TestValidationOnResult",new Schema({resultv:{type:String,required:!0}}));var t=start(),n=t.model("TestValidationOnResult"),r=new n;r.validate(function(i){assert.ok(i instanceof MongooseError);assert.ok(i instanceof ValidationError);r.resultv="yeah";r.save(function(i){assert.ifError(i);n.findOne({_id:r.id},function(n,r){assert.ifError(n);assert.equal(r.resultv,"yeah");r.save(function(n){t.close();assert.ifError(n);e()})})})})});it("of required previously existing null values",function(e){mongoose.model("TestPreviousNullValidation",new Schema({previous:{type:String,required:!0},a:String}));var t=start(),n=t.model("TestPreviousNullValidation");n.collection.insert({a:null,previous:null},{},function(r,i){assert.ifError(r);n.findOne({_id:i[0]._id},function(n,r){assert.ifError(n);assert.equal(!1,r.isNew);assert.strictEqual(r.get("previous"),null);r.validate(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);r.set("previous","yoyo");r.save(function(n){assert.strictEqual(n,null);t.close();e()})})})})});it("nested",function(e){mongoose.model("TestNestedValidation",new Schema({nested:{required:{type:String,required:!0}}}));var t=start(),n=t.model("TestNestedValidation"),r=new n;r.set("nested.required",null);r.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);r.set("nested.required","here");r.save(function(n){t.close();assert.ifError(n);e()})})});it("of nested subdocuments",function(e){var t=new Schema({required:{type:String,required:!0}}),n=new Schema({required:{type:String,required:!0},subs:[t]});mongoose.model("TestSubdocumentsValidation",new Schema({items:[n]}));var r=start(),i=r.model("TestSubdocumentsValidation"),s=new i;s.get("items").push({required:"",subs:[{required:""}]});s.save(function(t){assert.ok(t instanceof MongooseError);assert.ok(t instanceof ValidationError);assert.ok(t.errors["items.0.subs.0.required"]instanceof ValidatorError);assert.equal(t.errors["items.0.subs.0.required"].message,'Validator "required" failed for path required');assert.ok(s.errors["items.0.subs.0.required"]instanceof ValidatorError);assert.equal(s.errors["items.0.subs.0.required"].message,'Validator "required" failed for path required');assert.ok(!t.errors["items.0.required"]);assert.ok(!t.errors["items.0.required"]);assert.ok(!s.errors["items.0.required"]);assert.ok(!s.errors["items.0.required"]);s.items[0].subs[0].set("required",!0);assert.equal(undefined,s._validationError);s.save(function(t){assert.ok(t);assert.ok(t.errors);assert.ok(t.errors["items.0.required"]instanceof ValidatorError);assert.equal(t.errors["items.0.required"].message,'Validator "required" failed for path required');assert.ok(!t.errors["items.0.subs.0.required"]);assert.ok(!t.errors["items.0.subs.0.required"]);assert.ok(!s.errors["items.0.subs.0.required"]);assert.ok(!s.errors["items.0.subs.0.required"]);s.get("items")[0].set("required",!0);s.save(function(t){r.close();assert.ok(!s.errors);assert.ifError(t);e()})})})});describe("async",function(){it("works",function(e){function n(e,n){setTimeout(function(){t=!0;n(e!=="test")},5)}var t=!1;mongoose.model("TestAsyncValidation",new Schema({async:{type:String,validate:[n,"async validator"]}}));var r=start(),i=r.model("TestAsyncValidation"),s=new i;s.set("async","test");s.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.ok(n.errors.async instanceof ValidatorError);assert.equal(n.errors.async.message,'Validator "async validator" failed for path async');assert.equal(!0,t);t=!1;s.set("async","woot");s.save(function(n){r.close();assert.equal(!0,t);assert.strictEqual(n,null);e()})})});it("nested",function(e){function n(e,n){setTimeout(function(){t=!0;n(e!=="test")},5)}var t=!1;mongoose.model("TestNestedAsyncValidation",new Schema({nested:{async:{type:String,validate:[n,"async validator"]}}}));var r=start(),i=r.model("TestNestedAsyncValidation"),s=new i;s.set("nested.async","test");s.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.ok(t);t=!1;s.validate(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.ok(t);t=!1;s.set("nested.async","woot");s.validate(function(n){assert.ok(t);assert.equal(n,null);t=!1;s.save(function(n){r.close();assert.ok(t);assert.strictEqual(n,null);e()})})})})});it("subdocuments",function(e){function n(e,n){setTimeout(function(){t=!0;n(e!=="")},5)}var t=!1,r=new Schema({required:{type:String,validate:[n,"async in subdocs"]}});mongoose.model("TestSubdocumentsAsyncValidation",new Schema({items:[r]}));var i=start(),s=i.model("TestSubdocumentsAsyncValidation"),o=new s;o.get("items").push({required:""});o.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.ok(t);t=!1;o.get("items")[0].set({required:"here"});o.save(function(n){i.close();assert.ok(t);assert.strictEqual(n,null);e()})})})});it("without saving",function(e){mongoose.model("TestCallingValidation",new Schema({item:{type:String,required:!0}}));var t=start(),n=t.model("TestCallingValidation"),r=new n;assert.equal(!0,r.schema.path("item").isRequired);assert.strictEqual(r.isNew,!0);r.validate(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.strictEqual(r.isNew,!0);r.item="yo";r.validate(function(n){t.close();assert.equal(n,null);assert.strictEqual(r.isNew,!0);e()})})});it("when required is set to false",function(){function e(){return!0}mongoose.model("TestRequiredFalse",new Schema({result:{type:String,validate:[e,"chump validator"],required:!1}}));var t=start(),n=t.model("TestRequiredFalse"),r=new n;t.close();assert.equal(!1,r.schema.path("result").isRequired)});describe("middleware",function(){it("works",function(e){var t=start(),n=null,r=null,i=null;n=new Schema({baz:{type:String}});n.pre("validate",function(e){this.get("baz")=="bad"&&this.invalidate("baz","bad");e()});mongoose.model("ValidationMiddleware",n);r=t.model("ValidationMiddleware");i=new r;i.set({baz:"bad"});i.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.equal(n.errors.baz.type,"bad");assert.equal(n.errors.baz.path,"baz");i.set("baz","good");i.save(function(n){t.close();assert.strictEqual(n,null);e()})})});it("async",function(e){var t=start(),n=null,r=null,i=null;n=new Schema({prop:{type:String}});n.pre("validate",!0,function(e,t){var n=this;setTimeout(function(){n.get("prop")=="bad"&&n.invalidate("prop","bad");t()},5);e()});mongoose.model("AsyncValidationMiddleware",n);r=t.model("AsyncValidationMiddleware");i=new r;i.set({prop:"bad"});i.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.equal(n.errors.prop.type,"bad");assert.equal(n.errors.prop.path,"prop");i.set("prop","good");i.save(function(n){t.close();assert.strictEqual(n,null);e()})})});it("complex",function(e){var t=start(),n=null,r=null,i=null,s=function(e){return e==="abc"};n=new Schema({baz:{type:String},abc:{type:String,validate:[s,"must be abc"]},test:{type:String,validate:[/test/,"must also be abc"]},required:{type:String,required:!0}});n.pre("validate",!0,function(e,t){var n=this;setTimeout(function(){n.get("baz")=="bad"&&n.invalidate("baz","bad");t()},5);e()});mongoose.model("ComplexValidationMiddleware",n);r=t.model("ComplexValidationMiddleware");i=new r;i.set({baz:"bad",abc:"not abc",test:"fail"});i.save(function(n){assert.ok(n instanceof MongooseError);assert.ok(n instanceof ValidationError);assert.equal(4,Object.keys(n.errors).length);assert.ok(n.errors.baz instanceof ValidatorError);assert.equal(n.errors.baz.type,"bad");assert.equal(n.errors.baz.path,"baz");assert.ok(n.errors.abc instanceof ValidatorError);assert.equal(n.errors.abc.type,"must be abc");assert.equal(n.errors.abc.path,"abc");assert.ok(n.errors.test instanceof ValidatorError);assert.equal(n.errors.test.type,"must also be abc");assert.equal(n.errors.test.path,"test");assert.ok(n.errors.required instanceof ValidatorError);assert.equal(n.errors.required.type,"required");assert.equal(n.errors.required.path,"required");i.set({baz:"good",abc:"abc",test:"test",required:"here"});i.save(function(n){t.close();assert.strictEqual(n,null);e()})})})})});describe("defaults application",function(){it("works",function(){var e=Date.now();mongoose.model("TestDefaults",new Schema({date:{type:Date,"default":e}}));var t=start(),n=t.model("TestDefaults");t.close();var r=new n;assert.ok(r.get("date")instanceof Date);assert.equal(+r.get("date"),e)});it("nested",function(){var e=Date.now();mongoose.model("TestNestedDefaults",new Schema({nested:{date:{type:Date,"default":e}}}));var t=start(),n=t.model("TestNestedDefaults"),r=new n;t.close();assert.ok(r.get("nested.date")instanceof Date);assert.equal(+r.get("nested.date"),e)});it("subdocument",function(){var e=Date.now(),t=new Schema({date:{type:Date,"default":e}});mongoose.model("TestSubdocumentsDefaults",new Schema({items:[t]}));var n=start(),r=n.model("TestSubdocumentsDefaults");n.close();var i=new r;i.get("items").push({});assert.ok(i.get("items")[0].get("date")instanceof Date);assert.equal(+i.get("items")[0].get("date"),e)});it("allows nulls",function(e){var t=start(),n=t.model("NullDefault",new Schema({name:{type:String,"default":null}}),collection),r=new n;assert.strictEqual(null,r.name);r.save(function(i){assert.ifError(i);n.findById(r._id,function(n,r){t.close();assert.ifError(n);assert.strictEqual(null,r.name);e()})})})});describe("virtuals",function(){it("getters",function(){var e=start(),t=e.model("BlogPost",collection),n=new t({title:"Letters from Earth",author:"Mark Twain"});e.close();assert.equal(n.get("titleWithAuthor"),"Letters from Earth by Mark Twain");assert.equal(n.titleWithAuthor,"Letters from Earth by Mark Twain")});it("set()",function(){var e=start(),t=e.model("BlogPost",collection),n=new t;e.close();n.set("titleWithAuthor","Huckleberry Finn by Mark Twain");assert.equal(n.get("title"),"Huckleberry Finn");assert.equal(n.get("author"),"Mark Twain")});it("should not be saved to the db",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.set("titleWithAuthor","Huckleberry Finn by Mark Twain");r.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(n,r){assert.ifError(n);assert.equal(r.get("title"),"Huckleberry Finn");assert.equal(r.get("author"),"Mark Twain");assert.ok(!("titleWithAuthor"in r.toObject()));t.close();e()})})});it("nested",function(){var e=start(),t=new Schema({name:{first:String,last:String}});t.virtual("name.full").get(function(){return this.get("name.first")+" "+this.get("name.last")}).set(function(e){var t=e.split(" ");this.set("name.first",t[0]);this.set("name.last",t[1])});mongoose.model("Person",t);var n=e.model("Person"),r=new n({name:{first:"Michael",last:"Sorrentino"}});e.close();assert.equal(r.get("name.full"),"Michael Sorrentino");r.set("name.full","The Situation");assert.equal(r.get("name.first"),"The");assert.equal(r.get("name.last"),"Situation");assert.equal(r.name.full,"The Situation");r.name.full="Michael Sorrentino";assert.equal(r.name.first,"Michael");assert.equal(r.name.last,"Sorrentino")})});describe("remove()",function(){it("works",function(e){var t=start(),n="blogposts_"+random(),r=t.model("BlogPost",n),i=new r;i.save(function(n){assert.ifError(n);r.find({},function(n,i){assert.ifError(n);assert.equal(1,i.length);r.remove({},function(n){assert.ifError(n);r.find({},function(n,r){t.close();assert.ifError(n);assert.equal(0,r.length);e()})})})})})});describe("getters",function(){it("with same name on embedded docs do not class",function(){var e=new Schema({title:String,author:{name:String},subject:{name:String}});mongoose.model("PostWithClashGetters",e);var t=start(),n=t.model("PostWithClashGetters","postwithclash"+random()),r=new n({title:"Test",author:{name:"A"},subject:{name:"B"}});t.close();assert.equal(r.author.name,"A");assert.equal(r.subject.name,"B");assert.equal(r.author.name,"A")});it("should not be triggered at construction (gh-685)",function(){var e=start(),t=!1;e.close();var n=new mongoose.Schema({number:{type:Number,set:function(e){return e/2},get:function(e){t=!0;return e*2}}}),r=mongoose.model("gettersShouldNotBeTriggeredAtConstruction",n),i=new r({number:100});assert.equal(!1,t);var s=i.number;assert.equal(!0,t);assert.equal(100,s.valueOf());assert.equal(50,i.getValue("number").valueOf());t=!1;var o=new r;o.init({number:50});assert.equal(!1,t);s=o.number;assert.equal(!0,t);assert.equal(100,s.valueOf());assert.equal(50,o.getValue("number").valueOf())});it("with type defined with { type: Native } (gh-190)",function(){var e=new Schema({date:{type:Date}});mongoose.model("ShortcutGetterObject",e);var t=start(),n=t.model("ShortcutGetterObject","shortcut"+random()),r=new n;t.close();r.set("date",Date.now());assert.ok(r.date instanceof Date)});describe("nested",function(){it("works",function(){var e=new Schema({first:{second:[Number]}});mongoose.model("ShortcutGetterNested",e);var t=start(),n=t.model("ShortcutGetterNested",collection),r=new n;t.close();assert.equal("object",typeof r.first);assert.ok(r.first.second instanceof MongooseArray)});it("works with object literals",function(){var e=start(),t=e.model("BlogPost",collection);e.close();var n=new Date,r={date:n,visitors:5},i=new t;i.init({meta:r});assert.ok(i.get("meta").date instanceof Date);assert.ok(i.meta.date instanceof Date);var s=!1,o,u,a;try{a=JSON.stringify(r);o=JSON.stringify(i.get("meta"));u=JSON.stringify(i.meta)}catch(f){s=!0}assert.equal(!1,s);o=JSON.parse(o);u=JSON.parse(u);assert.equal(o.visitors,u.visitors);assert.equal(o.date,u.date);i.meta.date=new Date-1e3;assert.ok(i.meta.date instanceof Date);assert.ok(i.get("meta").date instanceof Date);i.meta.visitors=2;assert.equal("number",typeof i.get("meta").visitors);assert.equal("number",typeof i.meta.visitors);var l={date:n-2e3,visitors:234};i.set(l,"meta");assert.ok(i.meta.date instanceof Date);assert.
ok(i.get("meta").date instanceof Date);assert.equal("number",typeof i.meta.visitors);assert.equal("number",typeof i.get("meta").visitors);assert.equal(+i.meta.date,n-2e3);assert.equal(+i.get("meta").date,n-2e3);assert.equal(+i.meta.visitors,234);assert.equal(+i.get("meta").visitors,234);i.meta={date:n-3e3,visitors:4815162342};assert.ok(i.meta.date instanceof Date);assert.ok(i.get("meta").date instanceof Date);assert.equal("number",typeof i.meta.visitors);assert.equal("number",typeof i.get("meta").visitors);assert.equal(+i.meta.date,n-3e3);assert.equal(+i.get("meta").date,n-3e3);assert.equal(+i.meta.visitors,4815162342);assert.equal(+i.get("meta").visitors,4815162342)});it("object property access works when root initd with null",function(e){var t=start(),n=new Schema({nest:{st:String}});mongoose.model("NestedStringA",n);var r=t.model("NestedStringA",collection),i=new r({nest:null});assert.strictEqual(i.nest.st,undefined);i.nest={st:"jsconf rules"};assert.deepEqual(i.nest.toObject(),{st:"jsconf rules"});assert.equal(i.nest.st,"jsconf rules");i.save(function(n){t.close();assert.ifError(n);e()})});it("object property access works when root initd with undefined",function(e){var t=start(),n=new Schema({nest:{st:String}});mongoose.model("NestedStringB",n);var r=t.model("NestedStringB",collection),i=new r({nest:undefined});assert.strictEqual(i.nest.st,undefined);i.nest={st:"jsconf rules"};assert.deepEqual(i.nest.toObject(),{st:"jsconf rules"});assert.equal(i.nest.st,"jsconf rules");i.save(function(n){t.close();assert.ifError(n);e()})});it("pre-existing null object re-save",function(e){var t=start(),n=new Schema({nest:{st:String,yep:String}});mongoose.model("NestedStringC",n);var r=t.model("NestedStringC",collection),i=new r({nest:null});i.save(function(n){assert.ifError(n);i.nest={st:"jsconf rules",yep:"it does"};var s=i._delta()[1];assert.ok(s.$set);assert.ok(s.$set.nest);assert.equal(2,Object.keys(s.$set.nest).length);assert.ok(s.$set.nest.yep);assert.ok(s.$set.nest.st);i.save(function(n){assert.ifError(n);r.findById(i.id,function(n,r){assert.ifError(n);assert.equal(r.nest.st,"jsconf rules");assert.equal(r.nest.yep,"it does");r.nest=null;r.save(function(n){t.close();assert.ifError(n);assert.strictEqual(r._doc.nest,null);e()})})})})});it("array of Mixed on existing doc can be pushed to",function(e){var t=start();mongoose.model("MySchema",new Schema({nested:{arrays:[]}}));var n=t.model("MySchema"),r=new n({nested:{arrays:[]}}),i=1234567890;r.nested.arrays.push(["+10","yup",i]);r.save(function(s){assert.ifError(s);n.findById(r._id,function(r,s){assert.ifError(r);assert.deepEqual(s.nested.arrays.toObject(),[["+10","yup",i]]);s.nested.arrays.push(["another",1]);s.save(function(r){assert.ifError(r);n.findById(s._id,function(n,r){t.close();assert.ifError(n);assert.deepEqual(r.nested.arrays.toObject(),[["+10","yup",i],["another",1]]);e()})})})})});it('props can be set directly when property was named "type"',function(e){function n(){return[{x:1},{x:2},{x:3}]}var t=start();mongoose.model("MySchema2",new Schema({nested:{type:{type:String,"default":"yep"},array:{type:Array,"default":n}}}));var r=t.model("MySchema2",collection),i=new r;i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,i){assert.ifError(n);assert.equal(i.nested.type,"yep");assert.deepEqual(i.nested.array.toObject(),[{x:1},{x:2},{x:3}]);i.nested.type="nope";i.nested.array=["some","new","stuff"];i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.nested.type,"nope");assert.deepEqual(r.nested.array.toObject(),["some","new","stuff"]);e()})})})})})})});describe("setters",function(){it("are used on embedded docs (gh-365 gh-390 gh-422)",function(e){function n(e){return parseInt(e)}function i(){return++r}var t=start(),r=0,s=new Schema({lat:{type:Number,"default":0,set:n},"long":{type:Number,set:i}}),o=new Schema({title:String,locations:[s]});s=t.model("Location",s,"locations_"+random());o=t.model("Deal",o,"deals_"+random());var u=new s({lat:1.2,"long":10});assert.equal(u.lat.valueOf(),1);assert.equal(u.long.valueOf(),1);var a=new o({title:"My deal",locations:[{lat:1.2,"long":33}]});assert.equal(a.locations[0].lat.valueOf(),1);assert.equal(a.locations[0].long.valueOf(),2);a.save(function(n){assert.ifError(n);o.findById(a._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.locations[0].lat.valueOf(),1);assert.equal(r.locations[0].long.valueOf(),2);e()})})})});it("changing a number non-atomically (gh-203)",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.meta.visitors=5;r.save(function(i){assert.ifError(i);n.findById(r._id,function(i,s){assert.ifError(i);s.meta.visitors-=2;s.save(function(i){assert.ifError(i);n.findById(r._id,function(n,r){t.close();assert.ifError(n);assert.equal(3,+r.meta.visitors);e()})})})})});describe("atomic subdocument",function(){it("saving",function(e){var t=start(),n=t.model("BlogPost",collection),r=4,i=[],s=new n;s.save(function(o){function u(e){i.push(e);i.length==4&&i.forEach(function(e){e.save(function(e){assert.ifError(e);--r||a()})})}function a(){n.findOne({_id:s.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(r.get("comments").length,5);var i=r.get("comments").some(function(e){return e.get("title")=="1"});assert.ok(i);i=r.get("comments").some(function(e){return e.get("title")=="2"});assert.ok(i);i=r.get("comments").some(function(e){return e.get("title")=="3"});assert.ok(i);i=r.get("comments").some(function(e){return e.get("title")=="4"});assert.ok(i);i=r.get("comments").some(function(e){return e.get("title")=="5"});assert.ok(i);e()})}assert.ifError(o);n.findOne({_id:s.get("_id")},function(e,t){assert.ifError(e);t.get("comments").push({title:"1"});u(t)});n.findOne({_id:s.get("_id")},function(e,t){assert.ifError(e);t.get("comments").push({title:"2"});u(t)});n.findOne({_id:s.get("_id")},function(e,t){assert.ifError(e);t.get("comments").push({title:"3"});u(t)});n.findOne({_id:s.get("_id")},function(e,t){assert.ifError(e);t.get("comments").push({title:"4"},{title:"5"});u(t)})})});it("setting (gh-310)",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({comments:[{title:"first-title",body:"first-body"}]},function(r,i){assert.ifError(r);n.findById(i.id,function(r,s){assert.ifError(r);n.findById(i.id,function(r,o){assert.ifError(r);s.get("comments")[0].title="second-title";s.save(function(r){assert.ifError(r);o.get("comments")[0].body="second-body";o.save(function(r){assert.ifError(r);n.findById(i.id,function(n,r){assert.ifError(n);t.close();var i=r.get("comments")[0];assert.equal(i.title,"second-title");assert.equal(i.body,"second-body");e()})})})})})})})});it("doubly nested array saving and loading",function(e){var t=new Schema({arr:[Number]}),n=new Schema({inner:[t]});mongoose.model("Outer",n);var r=start(),n=r.model("Outer","arr_test_"+random()),i=new n;i.inner.push({});i.save(function(t){assert.ifError(t);assert.ok(i.get("_id")instanceof DocumentObjectId);n.findById(i.get("_id"),function(t,i){assert.ifError(t);assert.equal(1,i.inner.length);i.inner[0].arr.push(5);i.save(function(t){assert.ifError(t);assert.ok(i.get("_id")instanceof DocumentObjectId);n.findById(i.get("_id"),function(t,n){r.close();assert.ifError(t);assert.equal(1,n.inner.length);assert.equal(1,n.inner[0].arr.length);assert.equal(5,n.inner[0].arr[0]);e()})})})})});it("updating multiple Number $pushes as a single $pushAll",function(e){var t=start(),n=new Schema({nested:{nums:[Number]}});mongoose.model("NestedPushes",n);var r=t.model("NestedPushes",collection);r.create({},function(n,i){assert.ifError(n);i.nested.nums.push(1);i.nested.nums.push(2);assert.equal(i.nested.nums.length,2);i.save(function(n){assert.ifError(n);assert.equal(i.nested.nums.length,2);r.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal(i.nested.nums.length,2);e()})})})});it("updating at least a single $push and $pushAll as a single $pushAll",function(e){var t=start(),n=new Schema({nested:{nums:[Number]}});mongoose.model("NestedPushes",n);var r=t.model("NestedPushes",collection);r.create({},function(n,i){assert.ifError(n);i.nested.nums.push(1);i.nested.nums.push(2,3);assert.equal(3,i.nested.nums.length);i.save(function(n){assert.ifError(n);assert.equal(i.nested.nums.length,3);r.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.nested.nums.length,3);e()})})})});it("activePaths should be updated for nested modifieds",function(e){var t=start(),n=new Schema({nested:{nums:[Number]}});mongoose.model("NestedPushes",n);var r=t.model("NestedPushes",collection);r.create({nested:{nums:[1,2,3,4,5]}},function(n,r){assert.ifError(n);r.nested.nums.pull(1);r.nested.nums.pull(2);assert.equal(r._activePaths.paths["nested.nums"],"modify");t.close();e()})});it("$pull should affect what you see in an array before a save",function(e){var t=start(),n=new Schema({nested:{nums:[Number]}});mongoose.model("NestedPushes",n);var r=t.model("NestedPushes",collection);r.create({nested:{nums:[1,2,3,4,5]}},function(n,r){assert.ifError(n);r.nested.nums.pull(1);assert.equal(4,r.nested.nums.length);t.close();e()})});it("$shift",function(e){var t=start(),n=new Schema({nested:{nums:[Number]}});mongoose.model("TestingShift",n);var r=t.model("TestingShift",collection);r.create({nested:{nums:[1,2,3]}},function(n,i){assert.ifError(n);r.findById(i._id,function(n,s){assert.ifError(n);assert.equal(s.nested.nums.length,3);s.nested.nums.$pop();assert.equal(s.nested.nums.length,2);assert.equal(s.nested.nums[0],1);assert.equal(s.nested.nums[1],2);s.save(function(n){assert.ifError(n);r.findById(i._id,function(n,s){assert.ifError(n);assert.equal(2,s.nested.nums.length);assert.equal(1,s.nested.nums[0],1);assert.equal(2,s.nested.nums[1],2);s.nested.nums.$shift();assert.equal(1,s.nested.nums.length);assert.equal(s.nested.nums[0],2);s.save(function(n){assert.ifError(n);r.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.nested.nums.length,1);assert.equal(r.nested.nums[0],2);e()})})})})})})});describe("saving embedded arrays",function(){it("of Numbers atomically",function(e){var t=start(),n=new Schema({nums:[Number]}),r=2,i=[];mongoose.model("Temp",n);var s=t.model("Temp",collection),o=new s;o.save(function(n){function u(e){i.push(e);i.length==r&&i.forEach(function(e){e.save(function(e){assert.ifError(e);--r||a()})})}function a(){s.findOne({_id:o.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(3,r.get("nums").length);var i=r.get("nums").some(function(e){return e.valueOf()=="1"});assert.ok(i);i=r.get("nums").some(function(e){return e.valueOf()=="2"});assert.ok(i);i=r.get("nums").some(function(e){return e.valueOf()=="3"});assert.ok(i);e()})}assert.ifError(n);s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("nums").push(1);u(t)});s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("nums").push(2,3);u(t)})})});it("of Strings atomically",function(e){var t=start(),n=new Schema({strings:[String]}),r=2,i=[];mongoose.model("StrList",n);var s=t.model("StrList"),o=new s;o.save(function(n){function u(e){i.push(e);i.length==r&&i.forEach(function(e){e.save(function(e){assert.ifError(e);--r||a()})})}function a(){s.findOne({_id:o.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(3,r.get("strings").length);var i=r.get("strings").some(function(e){return e=="a"});assert.ok(i);i=r.get("strings").some(function(e){return e=="b"});assert.ok(i);i=r.get("strings").some(function(e){return e=="c"});assert.ok(i);e()})}assert.ifError(n);s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("strings").push("a");u(t)});s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("strings").push("b","c");u(t)})})});it("of Buffers atomically",function(e){var t=start(),n=new Schema({buffers:[Buffer]}),r=2,i=[];mongoose.model("BufList",n);var s=t.model("BufList"),o=new s;o.save(function(n){function u(e){i.push(e);i.length==r&&i.forEach(function(e){e.save(function(e){assert.ifError(e);--r||a()})})}function a(){s.findOne({_id:o.get("_id")},function(n,r){t.close();assert.ifError(n);assert.equal(3,r.get("buffers").length);var i=r.get("buffers").some(function(e){return e[0]==140});assert.ok(i);i=r.get("buffers").some(function(e){return e[0]==141});assert.ok(i);i=r.get("buffers").some(function(e){return e[0]==142});assert.ok(i);e()})}assert.ifError(n);s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("buffers").push(new Buffer([140]));u(t)});s.findOne({_id:o.get("_id")},function(e,t){assert.ifError(e);t.get("buffers").push(new Buffer([141]),new Buffer([142]));u(t)})})});it("works with modified element properties + doc removal (gh-975)",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({comments:[{title:"gh-975"}]});r.save(function(n){assert.ifError(n);r.comments[0].title="changed";r.save(function(n){assert.ifError(n);r.comments[0].remove();r.save(function(n){assert.ifError(n);t.close();e()})})})});it("updating an embedded document in an embedded array with set call",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({comments:[{title:"before-change"}]},function(r,i){assert.ifError(r);n.findById(i._id,function(r,i){assert.ifError(r);assert.equal("before-change",i.comments[0].title);var s=[{_id:i.comments[0]._id,title:"after-change"}];i.set("comments",s);i.save(function(r){assert.ifError(r);n.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal("after-change",r.comments[0].title);e()})})})})})});it("updating an embedded document in an embedded array (gh-255)",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({comments:[{title:"woot"}]},function(r,i){assert.ifError(r);n.findById(i._id,function(r,i){assert.ifError(r);assert.equal("woot",i.comments[0].title);i.comments[0].title="notwoot";i.save(function(r){assert.ifError(r);n.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal("notwoot",r.comments[0].title);e()})})})})});it("updating an embedded array document to an Object value (gh-334)",function(e){var t=start(),n=new Schema({name:String,subObj:{subName:String}}),r=new Schema({name:String,arrData:[n]});mongoose.model("GH334",r);var i=t.model("GH334"),s=new i;s.set({name:"name-value",arrData:[{name:"arrName1",subObj:{subName:"subName1"}}]});s.save(function(n){assert.ifError(n);i.findById(s.id,function(n,r){assert.ifError(n);r.arrData[0].set("subObj",{subName:"modified subName"});r.save(function(n){assert.ifError(n);i.findById(s.id,function(n,r){t.close();assert.ifError(n);assert.equal(r.arrData[0].subObj.subName,"modified subName");e()})})})})});it("saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.comments.push({title:"woot"});r.save(function(i){assert.ifError(i);assert.equal(1,r.comments.length);n.findById(r.id,function(i,s){assert.ifError(i);assert.equal(1,s.comments.length);r.save(function(i){assert.ifError(i);assert.equal(1,r.comments.length);n.findById(r.id,function(n,r){t.close();assert.ifError(n);assert.equal(1,r.comments.length);e()})})})})});describe("embedded array filtering",function(){it("by the id shortcut function",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.comments.push({title:"woot"});r.comments.push({title:"aaaa"});var i=r.comments[0],s=r.comments[1];r.save(function(o){assert.ifError(o);n.findById(r.get("_id"),function(n,r){t.close();assert.ifError(n);assert.equal(r.comments.id(i.get("_id")).title,"woot");var o=DocumentObjectId.toString(s._id);assert.equal(r.comments.id(o).title,"aaaa");e()})})});it("by the id with cast error",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(n,r){t.close();assert.ifError(n);assert.strictEqual(r.comments.id(null),null);e()})})});it("by the id shortcut with no match",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(n,r){t.close();assert.ifError(n);assert.strictEqual(r.comments.id(new DocumentObjectId),null);e()})})})});it("removing a subdocument atomically",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.title="hahaha";r.comments.push({title:"woot"});r.comments.push({title:"aaaa"});r.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(i,s){assert.ifError(i);s.comments[0].remove();s.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(n,r){t.close();assert.ifError(n);assert.equal(1,r.comments.length);assert.equal(r.comments[0].title,"aaaa");e()})})})})});it("single pull embedded doc",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.title="hahaha";r.comments.push({title:"woot"});r.comments.push({title:"aaaa"});r.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(i,s){assert.ifError(i);s.comments.pull(s.comments[0]);s.comments.pull(s.comments[0]);s.save(function(i){assert.ifError(i);n.findById(r.get("_id"),function(n,r){t.close();assert.ifError(n);assert.equal(0,r.comments.length);e()})})})})});it("saving mixed data",function(e){var t=start(),n=t.model("BlogPost",collection),r=3,i=new n;i.mixed="woot";i.save(function(s){assert.ifError(s);n.findById(i._id,function(n){assert.ifError(n);if(--r)return;t.close();e()})});var s=new n;s.mixed={name:"mr bungle",arr:[]};s.save(function(i){assert.ifError(i);n.findById(s._id,function(i,o){assert.ifError(i);assert.equal(!0,Array.isArray(o.mixed.arr));o.mixed=[{foo:"bar"}];o.save(function(i){assert.ifError(i);n.findById(o._id,function(i,o){assert.ifError(i);assert.equal(!0,Array.isArray(o.mixed));o.mixed.push({hello:"world"});o.mixed.push(["foo","bar"]);o.markModified("mixed");o.save(function(i,o){assert.ifError(i);n.findById(s._id,function(n,i){assert.ifError(n);assert.deepEqual(i.mixed[0],{foo:"bar"});assert.deepEqual(i.mixed[1],{hello:"world"});assert.deepEqual(i.mixed[2],["foo","bar"]);if(--r)return;t.close();e()})})});var u=new n;u.mixed=new Date;u.save(function(i){assert.ifError(i);n.findById(u._id,function(n,i){assert.ifError(n);assert.ok(i.mixed instanceof Date);if(--r)return;t.close();e()})})})})})});it("populating mixed data from the constructor (gh-200)",function(){var e=start(),t=e.model("BlogPost"),n=new t({mixed:{type:"test",github:"rules",nested:{number:3}}});e.close();assert.equal("test",n.mixed.type);assert.equal("rules",n.mixed.github);assert.equal(3,n.mixed.nested.number)});it('"type" is allowed as a key',function(e){mongoose.model("TestTypeDefaults",new Schema({type:{type:String,"default":"YES!"}}));var t=start(),n=t.model("TestTypeDefaults"),r=new n;assert.equal(typeof r.get("type"),"string");assert.equal(r.get("type"),"YES!");var i=t.model("TestTypeDefaults2",new Schema({x:{y:{type:{type:String},owner:String}}})),r=new i;r.x.y.type="#402";r.x.y.owner="me";r.save(function(n){t.close();assert.ifError(n);e()})});it("unaltered model does not clear the doc (gh-195)",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.title="woot";r.save(function(i){assert.ifError(i);n.findById(r._id,function(r,i){assert.ifError(r);i.save(function(r){assert.ifError(r);n.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.title,"woot");e()})})})})});describe("safe mode",function(){it("works",function(e){var t=new Schema({name:String,email:{type:String,index:{unique:!0,background:!1}}});mongoose.model("SafeHuman",t,!0);var n=start(),t=n.model("SafeHuman","safehuman"+random());t.on("index",function(r){assert.ifError(r);var i=new t({name:"Guillermo Rauch",email:"rauchg@gmail.com"});i.save(function(r){assert.ifError(r);t.findById(i._id,function(r,i){assert.ifError(r);assert.equal(i.email,"rauchg@gmail.com");var s=new t({name:"Lionel Messi",email:"rauchg@gmail.com"});s.save(function(t){n.close();assert.ok(/duplicate/.test(t.message));assert.ok(t instanceof Error);e()})})})})});it("can be disabled",function(e){var t=new Schema({name:String,email:{type:String,index:{unique:!0,background:!1}}});t.set("safe",!1);mongoose.model("UnsafeHuman",t,!0);var n=start(),t=n.model("UnsafeHuman","unsafehuman"+random());t.on("index",function(e){assert.ifError(e)});var r=new t({name:"Guillermo Rauch",email:"rauchg@gmail.com"});r.save(function(i){assert.ifError(i);t.findById(r._id,function(r,i){assert.ifError(r);assert.equal(i.email,"rauchg@gmail.com");var s=new t({name:"Lionel Messi",email:"rauchg@gmail.com"});s.save(function(t){n.close();assert.ifError(t);e()})})})})});describe("hooks",function(){describe("pre",function(){it("with undefined and null",function(e){var t=start(),n=new Schema({name:String}),r=0;n.pre("save",function(e){r++;e(undefined)});n.pre("save",function(e){r++;e(null)});var i=t.model("S",n,collection),s=new i({name:"zupa"});s.save(function(n){t.close();assert.ifError(n);assert.equal(2,r);e()})});it("called on all sub levels",function(e){var t=start(),n=new Schema({name:String});n.pre("save",function(e){this.name="grand";e()});var r=new Schema({name:String,grand:[n]});r.pre("save",function(e){this.name="child";e()});var i=new Schema({name:String,child:[r]});i.pre("save",function(e){this.name="parent";e()});var s=t.model("presave_hook",i,"presave_hook"),o=new s({name:"a",child:[{name:"b",grand:[{name:"c"}]}]});o.save(function(n,r){t.close();assert.ifError(n);assert.equal(r.name,"parent");assert.equal(r.child[0].name,"child");assert.equal(r.child[0].grand[0].name,"grand");e()})});it("error on any sub level",function(e){var t=start(),n=new Schema({name:String});n.pre("save",function(e){e(new Error("Error 101"))});var r=new Schema({name:String,grand:[n]});r.pre("save",function(e){this.name="child";e()});var i=new Schema({name:String,child:[r]});i.pre("save",function(e){this.name="parent";e()});var s=t.model("presave_hook_error",i,"presave_hook_error"),o=new s({name:"a",child:[{name:"b",grand:[{name:"c"}]}]});o.save(function(n,r){t.close();assert.ok(n instanceof Error);assert.equal(n.message,"Error 101");e()})});describe("init",function(){it("has access to the true ObjectId when used with querying (gh-289)",function(e){var t=start(),n=new Schema({}),r=null;n.pre("init",function(e){r=this._id;e()});var i=t.model("PreInit",n,"pre_inits"+random()),s=new i;s.save(function(n){assert.ifError(n);i.findById(s._id,function(n,i){t.close();assert.ifError(n);assert.strictEqual(undefined,r);e()})})})});it("should not work when calling next() after a thrown error",function(){var e=start(),t=new Schema({});t.methods.funky=function(){assert.strictEqual(!1,!0,"reached unreachable code")};t.pre("funky",function(t){e.close();try{t(new Error)}catch(n){assert.ok(n instanceof Error);t()}});var n=e.model("wowNext2xAndThrow",t,"next2xAndThrow"+random());(new n).funky()})});describe("post",function(){it("works",function(e){var t=new Schema({title:String}),n=!1,r=!1,i=!1,s=undefined;t.post("save",function(e){assert.equal(e.id,s.id);n=!0});t.post("init",function(){i=!0});t.post("remove",function(e){assert.equal(e.id,s.id);r=!0});mongoose.model("PostHookTest",t);var o=start(),u=o.model("PostHookTest");s=new u;s.save(function(t){process.nextTick(function(){assert.ifError(t);assert.ok(n);u.findById(s._id,function(t,n){process.nextTick(function(){assert.ifError(t);assert.ok(i);n.remove(function(t){process.nextTick(function(){o.close();assert.ifError(t);assert.ok(r);e()})})})})})})});it("on embedded docs",function(e){var t=!1,n=!1,r=!1,i=new Schema({title:String}),s=new Schema({embeds:[i]});i.post("save",function(e){t=!0});mongoose.model("Parent",s);var o=start(),u=o.model("Parent"),a=new u;a.embeds.push({title:"Testing post hooks for embedded docs"});a.save(function(n){o.close();assert.ifError(n);assert.ok(t);e()})})})});describe("#exec()",function(){it("count()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable count as promise"},function(r,i){assert.ifError(r);var s=n.count({title:"interoperable count as promise"});s.exec(function(n,r){t.close();assert.ifError(n);assert.equal(1,r);e()})})});it("update()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable update as promise"},function(r,i){assert.ifError(r);var s=n.update({title:"interoperable update as promise"},{title:"interoperable update as promise delta"});s.exec(function(r){assert.ifError(r);n.count({title:"interoperable update as promise delta"},function(n,r){t.close();assert.ifError(n);assert.equal(1,r);e()})})})});it("findOne()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable findOne as promise"},function(r,i){assert.ifError(r);var s=n.findOne({title:"interoperable findOne as promise"});s.exec(function(n,r){t.close();assert.ifError(n);assert.equal(r.id,i.id);e()})})});it("find()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable find as promise"},{title:"interoperable find as promise"},function(r,i,s){assert.ifError(r);var o=n.find({title:"interoperable find as promise"});o.exec(function(n,r){t.close();assert.ifError(n);assert.equal(r.length,2);assert.equal(r[0]._id.id,i._id.id);assert.equal(r[1]._id.id,s._id.id);e()})})});it("remove()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable remove as promise"},function(r,i,s){assert.ifError(r);var o=n.remove({title:"interoperable remove as promise"});o.exec(function(r){assert.ifError(r);n.count({title:"interoperable remove as promise"},function(n,r){t.close();assert.equal(r,0);e()})})})});it("op can be changed",function(e){var t=start(),n=t.model("BlogPost",collection),r="interop ad-hoc as promise";n.create({title:r},function(i,s){assert.ifError(i);var o=n.count({title:r});o.exec("findOne",function(n,r){t.close();assert.ifError(n);assert.equal(r.id,s.id);e()})})});describe("promises",function(){it("count()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable count as promise 2"},function(r,i){assert.ifError(r);var s=n.count({title:"interoperable count as promise 2"}),o=s.exec();o.addBack(function(n,r){t.close();assert.ifError(n);assert.equal(1,r);e()})})});it("update()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable update as promise 2"},function(r,i){assert.ifError(r);var s=n.update({title:"interoperable update as promise 2"},{title:"interoperable update as promise delta 2"}),o=s.exec();o.addBack(function(r){assert.ifError(r);n.count({title:"interoperable update as promise delta 2"},function(n,r){t.close();assert.ifError(n);assert.equal(1,r);e()})})})});it("findOne()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable findOne as promise 2"},function(r,i){assert.ifError(r);var s=n.findOne({title:"interoperable findOne as promise 2"}),o=s.exec();o.addBack(function(n,r){t.close();assert.ifError(n);assert.equal(r.id,i.id);e()})})});it("find()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable find as promise 2"},{title:"interoperable find as promise 2"},function(r,i,s){assert.ifError(r);var o=n.find({title:"interoperable find as promise 2"}),u=o.exec();u.addBack(function(n,r){t.close();assert.ifError(n);assert.equal(r.length,2);assert.equal(r[0].id,i.id);assert.equal(r[1].id,s.id);e()})})});it("remove()",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable remove as promise 2"},function(r,i,s){assert.ifError(r);var o=n.remove({title:"interoperable remove as promise 2"}),u=o.exec();u.addBack(function(r){assert.ifError(r);n.count({title:"interoperable remove as promise 2"},function(n,r){t.close();assert.equal(r,0);e()})})})});it("are compatible with op modification on the fly",function(e){var t=start(),n=t.model("BlogPost",collection);n.create({title:"interoperable ad-hoc as promise 2"},function(r,i){assert.ifError(r);var s=n.count({title:"interoperable ad-hoc as promise 2"}),o=s.exec("findOne");o.addBack(function(n,r){t.close();assert.ifError(n);assert.equal(r._id.id,i._id.id);e()})})})})});describe("profiling",function(){it("system.profile is a default model",function(){var e=mongoose.model("system.profile");assert.equal("object",typeof e.schema.paths.ts);assert.equal("object",typeof e.schema.paths.info);assert.equal("object",typeof e.schema.paths.millis);assert.equal("object",typeof e.schema.paths.op);assert.equal("object",typeof e.schema.paths.ns);assert.equal("object",typeof e.schema.paths.query);assert.equal("object",typeof e.schema.paths.updateobj);assert.equal("object",typeof e.schema.paths.ntoreturn);assert.equal("object",typeof e.schema.paths.nreturned);assert.equal("object",typeof e.schema.paths.nscanned);assert.equal("object",typeof e.schema.paths.responseLength);assert.equal("object",typeof e.schema.paths.client);assert.equal("object",typeof e.schema.paths.user);assert.equal("object",typeof e.schema.paths.idhack);assert.equal("object",typeof e.schema.paths.scanAndOrder);assert.equal("object",typeof e.schema.paths.keyUpdates);assert.strictEqual(undefined,e.schema.paths._id);assert.strictEqual(undefined,e.schema.virtuals.id);var t=start();e=t.model("system.profile");t.close();assert.equal("object",typeof e.schema.paths.ts);assert.equal("object",typeof e.schema.paths.info);assert.equal("object",typeof e.schema.paths.millis);assert.equal("object",typeof e.schema.paths.op);assert.equal("object",typeof e.schema.paths.ns);assert.equal("object",typeof e.schema.paths.query);assert.equal("object",typeof e.schema.paths.updateobj);assert.equal("object",typeof e.schema.paths.ntoreturn);assert.equal("object",typeof e.schema.paths.nreturned);assert.equal("object",typeof e.schema.paths.nscanned);assert.equal("object",typeof e.schema.paths.responseLength);assert.equal("object",typeof e.schema.paths.client);assert.equal("object",typeof e.schema.paths.user);assert.equal("object",typeof e.schema.paths.idhack);assert.equal("object",typeof e.schema.paths.scanAndOrder);assert.equal("object",typeof e.schema.paths.keyUpdates);assert.strictEqual(undefined,e.schema.paths._id);assert.strictEqual(undefined,e.schema.virtuals.id);t=start();delete t.base.modelSchemas["system.profile"];delete t.base.models["system.profile"];delete t.models["system.profile"];t.close();var n=t.model("system.profile",new Schema({name:String}));assert.equal("object",typeof n.schema.paths.name);assert.strictEqual(undefined,n.schema.paths.ts);delete t.base.modelSchemas["system.profile"];delete t.base.models["system.profile"];delete t.models["system.profile"]});it("level can be set",function(e){var t=start();t.setProfiling(3,function(n){assert.equal(n.message,"Invalid profiling level: 3");t.setProfiling("fail",function(n){assert.equal(n.message,"Invalid profiling level: fail");t.setProfiling(2,function(n,r){assert.ifError(n);t.setProfiling(1,50,function(n,r){assert.ifError(n);assert.equal(2,r.was);t.setProfiling(0,function(n,r){t.close();assert.ifError(n);assert.equal(1,r.was);assert.equal(50,r.slowms);e()})})})})})})});describe("console.log",function(){it("hides private props",function(){var e=start(),t=e.model("BlogPost",collection),n=new Date(1305730951086),r=new DocumentObjectId("4dd3e169dbfb13b4570000b9"),i=new DocumentObjectId("4dd3e169dbfb13b4570000b6"),s=new DocumentObjectId("4dd3e169dbfb13b4570000b7"),o=new DocumentObjectId("4dd3e169dbfb13b4570000b8"),u=new t({title:"Test",_id:r,date:n,numbers:[5,6,7],owners:[i],meta:{visitors:45},comments:[{_id:s,title:"my comment",date:n,body:"this is a comment"},{_id:o,title:"the next thang",date:n,body:"this is a comment too!"}]});e.close();var a="{ meta: { visitors: 45 },\n  numbers: [ 5, 6, 7 ],\n  owners: [ 4dd3e169dbfb13b4570000b6 ],\n  comments: \n   [{ _id: 4dd3e169dbfb13b4570000b7,\n     comments: [],\n     body: 'this is a comment',\n     date: Wed, 18 May 2011 15:02:31 GMT,\n     title: 'my comment' }\n   { _id: 4dd3e169dbfb13b4570000b8,\n     comments: [],\n     body: 'this is a comment too!',\n     date: Wed, 18 May 2011 15:02:31 GMT,\n     title: 'the next thang' }],\n  _id: 4dd3e169dbfb13b4570000b9,\n  date: Wed, 18 May 2011 15:02:31 GMT,\n  title: 'Test' }",f=u.inspect();assert.ok(/meta: { visitors: 45 }/.test(f));assert.ok(/numbers: \[ 5, 6, 7 \]/.test(f));assert.ok(/Wed.+ 2011 \d\d:02:31 GMT/.test(f));assert.ok(!/activePaths:/.test(f));assert.ok(!/_atomics:/.test(f))})});describe("pathnames",function(){it("named path can be used",function(){var e=start(),t=e.model("pathnametest",new Schema({path:String}));e.close();var n=!1;try{new t({path:"i should not throw"})}catch(r){n=!0}assert.ok(!n)})});describe("auto_reconnect",function(){describe("if disabled",function(){describe("with mongo down",function(){it("should pass an error",function(e){var t=start({server:{auto_reconnect
:!1}}),n=t.model("Thing",new Schema({type:String}));t.on("open",function(){var r=new n({type:"monster"}),i=!1;r.save(function(e){assert.equal(e.message,"no open connections");i=!0});t.db.close();setTimeout(function(){assert.ok(i);e()},500)})})})})});it("subdocuments with changed values should persist the values",function(e){var t=start(),n=new Schema({name:String,mixed:Schema.Types.Mixed}),r=t.model("SubDocMixed",new Schema({subs:[n]})),i=new r({subs:[{name:"Hubot",mixed:{w:1,x:2}}]});assert.equal(i.subs[0].name,"Hubot");assert.equal(i.subs[0].mixed.w,1);assert.equal(i.subs[0].mixed.x,2);i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,i){assert.ifError(n);assert.equal(i.subs[0].name,"Hubot");assert.equal(i.subs[0].mixed.w,1);assert.equal(i.subs[0].mixed.x,2);var s=i.subs[0];s.name="Hubot1";assert.equal(s.name,"Hubot1");assert.ok(s.isModified("name"));assert.ok(i.isModified());i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,i){assert.ifError(n);assert.strictEqual(i.subs[0].name,"Hubot1");var s=i.subs[0];s.mixed.w=5;assert.equal(s.mixed.w,5);assert.ok(!s.isModified("mixed"));s.markModified("mixed");assert.ok(s.isModified("mixed"));assert.ok(s.isModified());assert.ok(i.isModified());i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,r){t.close();assert.ifError(n);assert.strictEqual(r.subs[0].mixed.w,5);e()})})})})})})});describe("RegExps",function(){it("can be saved",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n({mixed:{rgx:/^asdf$/}});assert.ok(r.mixed.rgx instanceof RegExp);assert.equal(r.mixed.rgx.source,"^asdf$");r.save(function(i){assert.ifError(i);n.findById(r._id,function(n,r){t.close();assert.ifError(n);assert.ok(r.mixed.rgx instanceof RegExp);assert.equal(r.mixed.rgx.source,"^asdf$");e()})})})});it("a single instantiated document should be able to update its embedded documents more than once",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.comments.push({title:"one"});r.save(function(i){assert.ifError(i);assert.equal(r.comments[0].title,"one");r.comments[0].title="two";assert.equal(r.comments[0].title,"two");r.save(function(i){assert.ifError(i);n.findById(r._id,function(n,r){t.close();assert.ifError(n);assert.equal(r.comments[0].title,"two");e()})})})});describe("save()",function(){describe("when no callback is passed",function(){it("should emit error on its db",function(e){var t=start();t.on("error",function(n){t.close();assert.ok(n instanceof Error);e()});var n=new Schema({});n.pre("save",function(e){e(new Error)});var r=t.model("DefaultErr2",n,"default_err_"+random());(new r).save()});it("should emit error on its Model when there are listeners",function(e){var t=start(),n=new Schema({});n.pre("save",function(e){e(new Error)});var r=t.model("DefaultErr3",n,"default_err_"+random());r.on("error",function(n){t.close();assert.ok(n instanceof Error);e()});(new r).save()});it("should throw error when nothing is listening to db or Model errors",function(e){var t=start({noErrorListener:1}),n=new Schema({});n.pre("save",function(n){try{n(new Error)}catch(r){t.close();assert.ok(r instanceof Error);e()}});var r=t.model("DefaultErr1",n,"default_err_"+random());(new r).save()})});it("returns number of affected docs",function(e){var t=start(),n=new Schema({name:String}),r=t.model("AffectedDocsAreReturned",n),i=new r({name:"aaron"});i.save(function(n,r,o){assert.ifError(n);assert.equal(1,o);i.name="heckmanananananana";i.save(function(n,r,i){t.close();assert.ifError(n);assert.equal(1,i);e()})})})});describe("backward compatibility",function(){it("with conflicted data in db",function(e){var t=start(),n=t.model("backwardDataConflict",new Schema({namey:{first:String,last:String}})),r=new n({namey:"[object Object]"});r.namey={first:"GI",last:"Joe"};r.save(function(n){t.close();assert.strictEqual(n,null);assert.strictEqual("GI",r.namey.first);assert.strictEqual("Joe",r.namey.last);e()})});it("with positional notation on path not existing in schema (gh-1048)",function(e){var t=start(),n=t.model("backwardCompat-gh-1048",Schema({name:"string"}));t.on("open",function(){var r={name:"gh-1048",_id:new mongoose.Types.ObjectId,databases:{0:{keys:100,expires:0},15:{keys:1,expires:0}}};n.collection.insert(r,{safe:!0},function(i){assert.ifError(i);n.findById(r._id,function(n,r){t.close();assert.ifError(n);assert.ok(r);assert.ok(r._doc.databases);assert.ok(r._doc.databases[0]);assert.ok(r._doc.databases[15]);assert.equal(undefined,r.databases);e()})})})})});describe("create()",function(){it("accepts an array",function(e){var t=start(),n=t.model("BlogPost",collection);n.create([{title:"hi"},{title:"bye"}],function(n,r,i){t.close();assert.strictEqual(n,null);assert.ok(r.get("_id")instanceof DocumentObjectId);assert.ok(i.get("_id")instanceof DocumentObjectId);assert.equal(r.title,"hi");assert.equal(i.title,"bye");e()})});it("fires callback when passed 0 docs",function(e){var t=start(),n=t.model("BlogPost",collection);n.create(function(n,r){t.close();assert.strictEqual(n,null);assert.ok(!r);e()})});it("fires callback when empty array passed",function(e){var t=start(),n=t.model("BlogPost",collection);n.create([],function(n,r){t.close();assert.strictEqual(n,null);assert.ok(!r);e()})})});describe("non-schema adhoc property assignments",function(){it("are not saved",function(e){var t=start(),n=t.model("BlogPost",collection),r=new n;r.whateveriwant=10;r.save(function(i){assert.ifError(i);n.collection.findOne({_id:r._id},function(n,r){t.close();assert.ifError(n);assert.ok(!("whateveriwant"in r));e()})})})});it("should not throw range error when using Number _id and saving existing doc (gh-691)",function(e){var t=start(),n=new Schema({_id:Number,a:String}),r=t.model("Testing691",n,"asdf"+random()),i=new r({_id:1});i.save(function(n){assert.ifError(n);r.findById(i._id,function(n,r){assert.ifError(n);r.a="yo";r.save(function(n){t.close();assert.ifError(n);e()})})})});describe("setting an unset value",function(){it("is saved (gh-742)",function(e){var t=start(),n=t.model("defaultTestObject",new Schema({score:{type:Number,"default":55}})),r=new n;r.save(function(r,i){assert.ifError(r);assert.equal(i.score,55);n.findById(i._id,function(r,i){assert.ifError(r);i.score=undefined;i.save(function(r,i,s){assert.ifError(r);n.findById(i._id,function(n,r){assert.ifError(n);r.score=55;r.save(function(n,r,i){t.close();assert.ifError(n);assert.equal(r.score,55);assert.equal(i,1);e()})})})})})})});it("path is cast to correct value when retreived from db",function(e){var t=start(),n=new Schema({title:{type:"string",index:!0}}),r=t.model("T",n);r.collection.insert({title:234},{safe:!0},function(n){assert.ifError(n);r.findOne(function(n,r){t.close();assert.ifError(n);assert.equal("234",r.title);e()})})});it("setting a path to undefined should retain the value as undefined",function(e){var t=start(),n=t.model("BlogPost",collection+random()),r=new n;r.title="css3";assert.equal(r._delta()[1].$set.title,"css3");r.title=undefined;assert.equal(r._delta()[1].$unset.title,1);assert.strictEqual(undefined,r._delta()[1].$set);r.title="css3";r.author="aaron";r.numbers=[3,4,5];r.meta.date=new Date;r.meta.visitors=89;r.comments=[{title:"thanksgiving",body:"yuuuumm"}];r.comments.push({title:"turkey",body:"cranberries"});r.save(function(i){assert.ifError(i);n.findById(r._id,function(i,s){assert.ifError(i);assert.equal(s.title,"css3");assert.equal(s.author,"aaron");assert.equal(s.meta.date.toString(),r.meta.date.toString());assert.equal(s.meta.visitors.valueOf(),r.meta.visitors.valueOf());assert.equal(2,s.comments.length);assert.equal(s.comments[0].title,"thanksgiving");assert.equal(s.comments[0].body,"yuuuumm");assert.equal(s.comments[1].title,"turkey");assert.equal(s.comments[1].body,"cranberries");s.title=undefined;s.author=null;s.meta.date=undefined;s.meta.visitors=null;s.comments[0].title=null;s.comments[0].body=undefined;s.save(function(r){assert.ifError(r);n.findById(s._id,function(r,i){assert.ifError(r);assert.strictEqual(undefined,i.title);assert.strictEqual(null,i.author);assert.strictEqual(undefined,i.meta.date);assert.strictEqual(null,i.meta.visitors);assert.strictEqual(null,i.comments[0].title);assert.strictEqual(undefined,i.comments[0].body);assert.equal(i.comments[1].title,"turkey");assert.equal(i.comments[1].body,"cranberries");i.meta=undefined;i.comments=undefined;i.save(function(r){assert.ifError(r);n.collection.findOne({_id:i._id},function(n,r){t.close();assert.ifError(n);assert.strictEqual(undefined,r.meta);assert.strictEqual(undefined,r.comments);e()})})})})})})});describe("unsetting a default value",function(){it("should be ignored (gh-758)",function(e){var t=start(),n=t.model("758",new Schema({s:String,n:Number,a:Array}));n.collection.insert({},{safe:!0},function(t){assert.ifError(t);n.findOne(function(t,n){assert.ifError(t);n.s=n.n=n.a=undefined;assert.equal(undefined,n._delta());e()})})})})});