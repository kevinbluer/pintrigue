/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ObjectId=Schema.ObjectId,MongooseBuffer=mongoose.Types.Buffer,DocumentObjectId=mongoose.Types.ObjectId,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPostB=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],tags:[String],sigs:[Buffer],owners:[ObjectId],comments:[Comments],def:{type:String,"default":"kandinsky"}}),modelName="model.select.blogpost";mongoose.model(modelName,BlogPostB);var collection="blogposts_"+random();describe("model field selection",function(){it("excluded fields should be undefined",function(e){var t=start(),n=t.model(modelName,collection),r=new Date;n.create({title:"subset 1",author:"me",meta:{date:r}},function(r,i){assert.ifError(r);var s=i.id;n.findById(i.id,{title:0,"meta.date":0,owners:0},function(n,r){t.close();assert.ifError(n);assert.equal(r._id.toString(),i._id);assert.strictEqual(undefined,r.title);assert.strictEqual("kandinsky",r.def);assert.strictEqual("me",r.author);assert.strictEqual(!0,Array.isArray(r.comments));assert.equal(undefined,r.meta.date);assert.equal(r.comments.length,0);assert.equal(undefined,r.owners);e()})})});it("excluded fields should be undefined and defaults applied to other fields",function(e){var t=start(),n=t.model(modelName,collection),r=new DocumentObjectId,i=new Date;n.collection.insert({_id:r,title:"hahaha1",meta:{date:i}},function(s){assert.ifError(s);n.findById(r,{title:0},function(n,s){t.close();assert.ifError(n);assert.equal(s._id.toString(),r);assert.strictEqual(undefined,s.title);assert.strictEqual("kandinsky",s.def);assert.strictEqual(undefined,s.author);assert.strictEqual(!0,Array.isArray(s.comments));assert.equal(i.toString(),s.meta.date.toString());assert.equal(s.comments.length,0);e()})})});it("where subset of fields excludes _id",function(e){var t=start(),n=t.model(modelName,collection);n.create({title:"subset 1"},function(r,i){assert.ifError(r);n.findOne({title:"subset 1"},{title:1,_id:0},function(n,r){t.close();assert.ifError(n);assert.strictEqual(undefined,r._id);assert.equal(r.title,"subset 1");e()})})});it("works with subset of fields, excluding _id",function(e){var t=start(),n=t.model(modelName,collection);n.create({title:"subset 1",author:"me"},function(r,i){assert.ifError(r);n.find({title:"subset 1"},{title:1,_id:0},function(n,r){t.close();assert.ifError(n);assert.strictEqual(undefined,r[0]._id);assert.equal(r[0].title,"subset 1");assert.strictEqual(undefined,r[0].def);assert.strictEqual(undefined,r[0].author);assert.strictEqual(!1,Array.isArray(r[0].comments));e()})})});it("works with subset of fields excluding emebedded doc _id (gh-541)",function(e){var t=start(),n=t.model(modelName,collection);n.create({title:"LOTR",comments:[{title:":)"}]},function(r,i){assert.ifError(r);n.find({_id:i},{_id:0,"comments._id":0},function(n,r){t.close();assert.ifError(n);assert.strictEqual(undefined,r[0]._id);assert.equal(r[0].title,"LOTR");assert.strictEqual("kandinsky",r[0].def);assert.strictEqual(undefined,r[0].author);assert.strictEqual(!0,Array.isArray(r[0].comments));assert.equal(r[0].comments.length,1);assert.equal(r[0].comments[0].title,":)");assert.strictEqual(undefined,r[0].comments[0]._id);assert.strictEqual(null,r[0].comments[0].id);e()})})});it("included fields should have defaults applied when no value exists in db (gh-870)",function(e){var t=start(),n=t.model(modelName,collection),r=new DocumentObjectId;n.collection.insert({_id:r,title:"issue 870"},function(i){assert.ifError(i);n.findById(r,"def comments",function(n,i){t.close();assert.ifError(n);assert.ok(i);assert.equal(i._id.toString(),r);assert.strictEqual(undefined,i.title);assert.strictEqual("kandinsky",i.def);assert.strictEqual(undefined,i.author);assert.strictEqual(!0,Array.isArray(i.comments));assert.equal(0,i.comments.length);e()})})})});