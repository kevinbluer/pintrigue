/**
 * Test dependencies.
 */var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error,Comments=new Schema;Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPost=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],owners:[ObjectId],comments:[Comments],nested:{array:[Number]}});BlogPost.virtual("titleWithAuthor").get(function(){return this.get("title")+" by "+this.get("author")}).set(function(e){var t=e.split(" by ");this.set("title",t[0]);this.set("author",t[1])});BlogPost.method("cool",function(){return this});BlogPost.static("woot",function(){return this});var modelName="docuemnt.modified.blogpost";mongoose.model(modelName,BlogPost);var collection="blogposts_"+random();describe("document modified",function(){describe("modified states",function(){it("reset after save",function(e){function s(){n.findById(i,function(n,r){t.close();assert.strictEqual(null,n);assert.equal(2,r.numbers.length);e()})}var t=start(),n=t.model(modelName,collection),r=2,i=new n;i.numbers.push(3);i.save(function(e){assert.strictEqual(null,e);--r||s()});i.numbers.push(3);i.save(function(e){assert.strictEqual(null,e);--r||s()})});it("of embedded docs reset after save",function(e){var t=start(),n=t.model(modelName,collection),r=new n({title:"hocus pocus"});r.comments.push({title:"Humpty Dumpty",comments:[{title:"nested"}]});r.save(function(n){t.close();assert.strictEqual(null,n);var i=r.comments[0].isModified("title");assert.equal(!1,i);assert.equal(!1,r.isModified("title"));e()})})});describe("isModified",function(){it("should not throw with no argument",function(){var e=start(),t=e.model(modelName,collection),n=new t;e.close();var r=!1;try{n.isModified()}catch(i){r=!0}assert.equal(!1,r)});it("when modifying keys",function(){var e=start(),t=e.model(modelName,collection);e.close();var n=new t;n.init({title:"Test",slug:"test",date:new Date});assert.equal(!1,n.isModified("title"));n.set("title","test");assert.equal(!0,n.isModified("title"));assert.equal(!1,n.isModified("date"));n.set("date",new Date(n.date+1));assert.equal(!0,n.isModified("date"));assert.equal(!1,n.isModified("meta.date"))});it("setting a key identically to its current value should not dirty the key",function(){var e=start(),t=e.model(modelName,collection);e.close();var n=new t;n.init({title:"Test",slug:"test",date:new Date});assert.equal(!1,n.isModified("title"));n.set("title","Test");assert.equal(!1,n.isModified("title"))});describe("on DocumentArray",function(){it("work",function(){var e=start(),t=e.model(modelName,collection);e.close();var n=new t;n.init({title:"Test",slug:"test",comments:[{title:"Test",date:new Date,body:"Test"}]});assert.equal(!1,n.isModified("comments.0.title"));n.get("comments")[0].set("title","Woot");assert.equal(!0,n.isModified("comments"));assert.equal(!1,n.isDirectModified("comments"));assert.equal(!0,n.isModified("comments.0.title"));assert.equal(!0,n.isDirectModified("comments.0.title"));e.close()});it("with accessors",function(){var e=start(),t=e.model(modelName,collection),n=new t;n.init({title:"Test",slug:"test",comments:[{title:"Test",date:new Date,body:"Test"}]});assert.equal(!1,n.isModified("comments.0.body"));n.get("comments")[0].body="Woot";assert.equal(!0,n.isModified("comments"));assert.equal(!1,n.isDirectModified("comments"));assert.equal(!0,n.isModified("comments.0.body"));assert.equal(!0,n.isDirectModified("comments.0.body"));e.close()})});describe("on MongooseArray",function(){it("atomic methods",function(){var e=start(),t=e.model(modelName,collection);e.close();var n=new t;assert.equal(!1,n.isModified("owners"));n.get("owners").push(new DocumentObjectId);assert.equal(!0,n.isModified("owners"))});it("native methods",function(){var e=start(),t=e.model(modelName,collection);e.close();var n=new t;assert.equal(!1,n.isModified("owners"))})});it("on entire document",function(e){var t=start(),n=t.model(modelName,collection),r={title:"Test",slug:"test",date:new Date,meta:{date:new Date,visitors:5},published:!0,mixed:{x:[{y:[1,"yes",2]}]},numbers:[],owners:[new DocumentObjectId,new DocumentObjectId],comments:[{title:"Test",date:new Date,body:"Test"},{title:"Super",date:new Date,body:"Cool"}]};n.create(r,function(r,i){assert.ifError(r);n.findById(i.id,function(n,r){t.close();assert.ifError(n);assert.equal(!1,r.isModified("comments"));assert.equal(!1,r.isNew);r.set(r.toObject());assert.equal(!1,r.isModified("title"));assert.equal(!1,r.isModified("slug"));assert.equal(!1,r.isModified("date"));assert.equal(!1,r.isModified("meta.date"));assert.equal(!1,r.isModified("meta.visitors"));assert.equal(!1,r.isModified("published"));assert.equal(!1,r.isModified("mixed"));assert.equal(!1,r.isModified("numbers"));assert.equal(!1,r.isModified("owners"));assert.equal(!1,r.isModified("comments"));var i=r.comments.slice();i[2]=r.comments.create({title:"index"});r.comments=i;assert.equal(!0,r.isModified("comments"));e()})})})})});