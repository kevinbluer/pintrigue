var sys=require("util"),fs=require("fs"),BSON=require("../../build/Release/bson").BSON,Buffer=require("buffer").Buffer,BSONJS=require("../../lib/bson/bson").BSON,BinaryParser=require("../../lib/bson/binary_parser").BinaryParser,Long=require("../../lib/bson/long").Long,ObjectID=require("../../lib/bson/bson").ObjectID,Binary=require("../../lib/bson/bson").Binary,Code=require("../../lib/bson/bson").Code,DBRef=require("../../lib/bson/bson").DBRef,Symbol=require("../../lib/bson/bson").Symbol,Double=require("../../lib/bson/bson").Double,MaxKey=require("../../lib/bson/bson").MaxKey,MinKey=require("../../lib/bson/bson").MinKey,Timestamp=require("../../lib/bson/bson").Timestamp,gleak=require("../../tools/gleak"),assert=require("assert"),bsonC=new BSON([Long,ObjectID,Binary,Code,DBRef,Symbol,Double,Timestamp,MaxKey,MinKey]),bsonJS=new BSONJS([Long,ObjectID,Binary,Code,DBRef,Symbol,Double,Timestamp,MaxKey,MinKey]);exports.setUp=function(e){e()};exports.tearDown=function(e){e()};exports["Should Correctly Deserialize object"]=function(e){var t=[95,0,0,0,2,110,115,0,42,0,0,0,105,110,116,101,103,114,97,116,105,111,110,95,116,101,115,116,115,95,46,116,101,115,116,95,105,110,100,101,120,95,105,110,102,111,114,109,97,116,105,111,110,0,8,117,110,105,113,117,101,0,0,3,107,101,121,0,12,0,0,0,16,97,0,1,0,0,0,0,2,110,97,109,101,0,4,0,0,0,97,95,49,0,0],n="";for(var r=0;r<t.length;r++)n+=BinaryParser.fromByte(t[r]);var i=bsonC.deserialize(n);assert.equal("a_1",i.name);assert.equal(!1,i.unique);assert.equal(1,i.key.a);e.done()};exports["Should Correctly Deserialize object with all types"]=function(e){var t=[26,1,0,0,7,95,105,100,0,161,190,98,75,118,169,3,0,0,3,0,0,4,97,114,114,97,121,0,26,0,0,0,16,48,0,1,0,0,0,16,49,0,2,0,0,0,16,50,0,3,0,0,0,0,2,115,116,114,105,110,103,0,6,0,0,0,104,101,108,108,111,0,3,104,97,115,104,0,19,0,0,0,16,97,0,1,0,0,0,16,98,0,2,0,0,0,0,9,100,97,116,101,0,161,190,98,75,0,0,0,0,7,111,105,100,0,161,190,98,75,90,217,18,0,0,1,0,0,5,98,105,110,97,114,121,0,7,0,0,0,2,3,0,0,0,49,50,51,16,105,110,116,0,42,0,0,0,1,102,108,111,97,116,0,223,224,11,147,169,170,64,64,11,114,101,103,101,120,112,0,102,111,111,98,97,114,0,105,0,8,98,111,111,108,101,97,110,0,1,15,119,104,101,114,101,0,25,0,0,0,12,0,0,0,116,104,105,115,46,120,32,61,61,32,51,0,5,0,0,0,0,3,100,98,114,101,102,0,37,0,0,0,2,36,114,101,102,0,5,0,0,0,116,101,115,116,0,7,36,105,100,0,161,190,98,75,2,180,1,0,0,2,0,0,0,10,110,117,108,108,0,0],n="";for(var r=0;r<t.length;r++)n+=BinaryParser.fromByte(t[r]);var i=bsonJS.deserialize(new Buffer(n,"binary"));assert.equal("hello",i.string);assert.deepEqual([1,2,3],i.array);assert.equal(1,i.hash.a);assert.equal(2,i.hash.b);assert.ok(i.date!=null);assert.ok(i.oid!=null);assert.ok(i.binary!=null);assert.equal(42,i.int);assert.equal(33.3333,i.float);assert.ok(i.regexp!=null);assert.equal(!0,i.boolean);assert.ok(i.where!=null);assert.ok(i.dbref!=null);assert.ok(i["null"]==null);e.done()};exports["Should Serialize and Deserialize String"]=function(e){var t={hello:"world"},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Integer"]=function(e){var t={doc:5},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize null value"]=function(e){var t={doc:null},n=bsonC.serialize(t),r=bsonC.deserialize(n);assert.deepEqual(t,r);e.done()};exports["Should Correctly Serialize and Deserialize undefined value"]=function(e){var t={doc:undefined},n=bsonC.serialize(t),r=bsonJS.deserialize(new Buffer(n,"binary"));assert.equal(null,r.doc);e.done()};exports["Should Correctly Serialize and Deserialize Number"]=function(e){var t={doc:5.5},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Integer"]=function(e){var t={doc:42},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));t={doc:-5600};n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));t={doc:2147483647};n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));t={doc:-2147483648};n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Object"]=function(e){var t={doc:{age:42,name:"Spongebob",shoe_size:9.5}},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Array"]=function(e){var t={doc:[1,2,"a","b"]},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Array with added on functions"]=function(e){var t={doc:[1,2,"a","b"]},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize A Boolean"]=function(e){var t={doc:!0},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize a Date"]=function(e){var t=new Date;t.setUTCDate(12);t.setUTCFullYear(2009);t.setUTCMonth(10);t.setUTCHours(12);t.setUTCMinutes(0);t.setUTCSeconds(30);var n={doc:t},r=bsonC.serialize(n);assert.deepEqual(n,bsonC.deserialize(r));e.done()};exports["Should Correctly Serialize and Deserialize Oid"]=function(e){var t={doc:new ObjectID},n=bsonC.serialize(t);assert.deepEqual(t.doc.toHexString(),bsonC.deserialize(n).doc.toHexString());e.done()};exports["Should Correctly Serialize and Deserialize Buffer"]=function(e){var t={doc:new Buffer("123451234512345")},n=bsonC.serialize(t);assert.equal("123451234512345",bsonC.deserialize(n).doc.buffer.toString("ascii"));e.done()};exports["Should Correctly encode Empty Hash"]=function(e){var t={},n=bsonC.serialize(t);assert.deepEqual(t,bsonC.deserialize(n));e.done()};exports["Should Correctly Serialize and Deserialize Ordered Hash"]=function(e){var t={doc:{b:1,a:2,c:3,d:4}},n=bsonC.serialize(t),r=bsonC.deserialize(n).doc,i=[];for(var s in r)i.push(s);assert.deepEqual(["b","a","c","d"],i);e.done()};exports["Should Correctly Serialize and Deserialize Regular Expression"]=function(e){var t={doc:/foobar/mi},n=bsonC.serialize(t),r=bsonC.deserialize(n);assert.equal(t.doc.toString(),r.doc.toString());e.done()};exports["Should Correctly Serialize and Deserialize a Binary object"]=function(e){var t=new Binary,n="binstring";for(var r=0;r<n.length;r++)t.put(n.charAt(r));var i={doc:t},s=bsonC.serialize(i),o=bsonC.deserialize(s);assert.equal(i.doc.value(),o.doc.value());e.done()};exports["Should Correctly Serialize and Deserialize a big Binary object"]=function(e){var t=fs.readFileSync("test/node/data/test_gs_weird_bug.png","binary"),n=new Binary;n.write(t);var r={doc:n},i=bsonC.serialize(r),s=bsonC.deserialize(i);assert.equal(r.doc.value(),s.doc.value());e.done()};exports.noGlobalsLeaked=function(e){var t=gleak.detectNew();e.equal(0,t.length,"global var leak detected: "+t.join(", "));e.done()};