/*!
 * Module dependencies.
 */function SchemaBuffer(e,t){SchemaType.call(this,e,t,"Buffer")}function handleSingle(e){return this.castForQuery(e)}function handleArray(e){var t=this;return e.map(function(e){return t.castForQuery(e)})}var SchemaType=require("../schematype"),CastError=SchemaType.CastError,MongooseBuffer=require("../types").Buffer,Binary=MongooseBuffer.Binary,Query=require("../query");SchemaBuffer.prototype.__proto__=SchemaType.prototype;SchemaBuffer.prototype.checkRequired=function(e){return!!e&&!!e.length};SchemaBuffer.prototype.cast=function(e,t,n){if(SchemaType._isRef(this,e,n))return e;if(Buffer.isBuffer(e)){e instanceof MongooseBuffer||(e=new MongooseBuffer(e,[this.path,t]));return e}if(e instanceof Binary)return new MongooseBuffer(e.value(!0),[this.path,t]);if("string"==typeof e||Array.isArray(e))return new MongooseBuffer(e,[this.path,t]);throw new CastError("buffer",e)};SchemaBuffer.prototype.$conditionalHandlers={$ne:handleSingle,$in:handleArray,$nin:handleArray,$gt:handleSingle,$lt:handleSingle,$gte:handleSingle,$lte:handleSingle};SchemaBuffer.prototype.castForQuery=function(e,t){var n;if(arguments.length===2){n=this.$conditionalHandlers[e];if(!n)throw new Error("Can't use "+e+" with Buffer.");return n.call(this,t)}t=e;return this.cast(t).toObject()};module.exports=SchemaBuffer;