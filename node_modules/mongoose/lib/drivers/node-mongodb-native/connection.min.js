/*!
 * Module dependencies.
 */function NativeConnection(){MongooseConnection.apply(this,arguments)}function listen(e){if(e._listening)return;e._listening=!0;e.db.on("close",function(){if(e._closeCalled)return;if(e.db.serverConfig.autoReconnect){e.readyState=STATES.disconnected;e.emit("close");return}e.onClose()});e.db.on("error",function(t){e.emit("error",t)});e.db.on("timeout",function(t){var n=new Error(t&&t.err||"connection timeout");e.emit("error",n)});e.db.on("open",function(t,n){if(STATES.disconnected===e.readyState&&n&&n.databaseName){e.readyState=STATES.connected;e.emit("reconnected")}})}var MongooseConnection=require("../../connection"),mongo=require("mongodb"),Server=mongo.Server,STATES=require("../../connectionstate"),ReplSetServers=mongo.ReplSetServers;NativeConnection.prototype.__proto__=MongooseConnection.prototype;NativeConnection.prototype.doOpen=function(e){var t,n=this;if(!this.db){t=new mongo.Server(this.host,Number(this.port),this.options.server);this.db=new mongo.Db(this.name,t,this.options.db)}this.db.open(function(t){if(t)return e(t);e();listen(n)});return this};NativeConnection.prototype.doOpenSet=function(e){if(!this.db){var t=[],n=this.port,r=this;this.host.forEach(function(e,i){t.push(new mongo.Server(e,Number(n[i]),r.options.server))});var i=new ReplSetServers(t,this.options.replset);this.db=new mongo.Db(this.name,i,this.options.db);this.db.on("fullsetup",function(){r.emit("fullsetup")})}this.db.open(function(t){if(t)return e(t);e();listen(r)});return this};NativeConnection.prototype.doClose=function(e){this.db.close();e&&e();return this};module.exports=NativeConnection;