/*!
 * Access driver.
 */function MongooseBuffer(e,t,n){var r=arguments.length,i;0===r||null===arguments[0]||undefined===arguments[0]?i=0:i=e;var s,o,u;if(Array.isArray(t)){o=t[0];u=t[1]}else s=t;var a=new Buffer(i,s,n);a.__proto__=MongooseBuffer.prototype;Object.defineProperties(a,{validators:{value:[]},_path:{value:o},_parent:{value:u}});u&&"string"==typeof o&&Object.defineProperty(a,"_schema",{value:u.schema.path(o)});return a}var driver=global.MONGOOSE_DRIVER_PATH||"../drivers/node-mongodb-native",Binary=require(driver+"/binary");MongooseBuffer.prototype=new Buffer(0);MongooseBuffer.prototype._parent;MongooseBuffer.prototype._markModified=function(){var e=this._parent;e&&e.markModified(this._path);return this};MongooseBuffer.prototype.write=function(){var e=Buffer.prototype.write.apply(this,arguments);e>0&&this._markModified();return e};MongooseBuffer.prototype.copy=function(e){var t=Buffer.prototype.copy.apply(this,arguments);e instanceof MongooseBuffer&&e._markModified();return t};"writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 writeFloat writeDouble fill utf8Write binaryWrite asciiWrite set writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE writeInt16LE writeInt16BE writeInt32LE writeInt32BE writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE".split(" ").forEach(function(e){if(!Buffer.prototype[e])return;MongooseBuffer.prototype[e]=new Function("var ret = Buffer.prototype."+e+".apply(this, arguments);"+"this._markModified();"+"return ret;")});MongooseBuffer.prototype.toObject=function(e){e=typeof e!="undefined"?e:0;return new Binary(this,e)};MongooseBuffer.Binary=Binary;module.exports=MongooseBuffer;